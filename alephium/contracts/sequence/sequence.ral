// sequence started from 0, set `next = 0` when init contract state
Abstract Contract Sequence(
    mut next: U256,
    mut next1: U256, // TODO: better name
    mut next2: U256,
    unExecutedSequenceTemplateId: ByteVec,
    refundAddress: Address
) extends Constants() {
    @using(readonly = true)
    fn setExecuted(offset: U256, current: U256) -> U256 {
        let flag = 1 << offset
        assert!(current & flag == 0, ErrorCodes.InvalidSequence)
        return current | flag
    }

    @using(assetsInContract = true)
    fn compact() -> () {
        if (next1 != SequenceExecutedFlag) {
            let encodedState = encodeToByteVec!(
                selfContractId!(),
                next,
                next1,
                refundAddress
            )
            copyCreateSubContract!{selfAddress!() -> 1 alph}(u256To8Byte!(next / 256), unExecutedSequenceTemplateId, encodedState)
        }
        next = next + 256
        next1 = next2
        next2 = 0
    }

    fn checkSequence(seq: U256) -> Bool {
        if (seq < next) {
            let unExecutedSequenceId = subContractId!(u256To8Byte!(seq / 256))
            UnExecutedSequence(unExecutedSequenceId).checkSequence(seq)
            return true
        }

        if (seq >= (next + 768)) {
            compact()
            return false
        }

        if (seq >= (next + 512)) {
            compact()
        }

        assert!(seq < (next + 512), ErrorCodes.InvalidSequence)
        let offset = seq - next
        if (offset < 256) {
            next1 = setExecuted(offset, next1)
        } else {
            next2 = setExecuted(offset - 256, next2)
        }
        return true
    }

    @using(assetsInContract = true, preapprovedAssets = true)
    pub fn deposit(from: Address, alphAmount: U256) -> () {
        transferAlphToSelf!(from, alphAmount)
    }
}
