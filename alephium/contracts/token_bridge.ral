import "governance.ral"
import "sequence.ral"
import "token_wrapper.ral"
import "token_interface.ral"
import "token_wrapper.ral"
import "token_bridge_for_chain.ral"

TxContract TokenBridge(
    governanceId: ByteVec, // governance contract id
    governanceChainId: U256,
    governanceContractId: ByteVec,
    localChainId: U256,
    mut receivedSequence: U256,
    mut sendSequence: U256,     // the sequence of next message published by self
    tokenWrapperCodeHash: ByteVec,
    tokenWrapperTemplateId: ByteVec,         // used for create contract by copyCreateContract
    tokenBridgeForChainTemplateId: ByteVec,  // used for create contract by copyCreateContract
    undoneSequenceTemplateId: ByteVec,       // used for create contract by copyCreateContract
    refundAddress: Address
) {
    fn checkModuleAndAction(payload: ByteVec, start: U256, action: ByteVec) -> () {
        let tokenBridgeModule = #000000000000000000000000000000000000000000546f6b656e427269646765
        assert!(byteVecSlice!(payload, start, start + 32) == tokenBridgeModule)
        assert!(byteVecSlice!(payload, start + 32, start + 33) == action)
    }

    fn verifyGovernanceVAA(vaa: ByteVec) -> ByteVec {
        let governance = Governance(governanceId)
        let (emitterChainId, emitterAddress, msgSequence, payload) = governance.parseAndVerifyVAA(vaa)
        assert!(emitterChainId == governanceChainId)
        assert!(emitterAddress == governanceContractId)
        assert!(msgSequence == receivedSequence)
        receivedSequence = receivedSequence + 1
        return payload
    }

    fn parseRegisterChain(vaa: ByteVec) -> (U256, ByteVec) {
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #01)
        let chainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
        assert!(chainId == localChainId || chainId == 0)
        let remoteChainId = u256From2Byte!(byteVecSlice!(payload, 35, 37))
        assert!(remoteChainId != localChainId)
        let remoteTokenBridgeId = byteVecSlice!(payload, 37, 69)
        assert!(size!(payload) == 69)
        return remoteChainId, remoteTokenBridgeId
    }

    // register chain is a governance action
    @using(preapprovedAssets = true)
    pub fn registerChain(vaa: ByteVec, payer: Address, createContractAlphAmount: U256) -> () {
        let (remoteChainId, remoteTokenBridgeId) = parseRegisterChain(vaa)
        assert!(remoteChainId != localChainId)

        let mut encodedState = encodeToByteVec!(
            governanceId,
            localChainId,
            selfContractId!(),
            remoteChainId,
            remoteTokenBridgeId,
            0,
            0,
            0,
            undoneSequenceTemplateId,
            tokenWrapperTemplateId,
            tokenWrapperCodeHash,
            refundAddress
        )

        copyCreateSubContract!{payer -> createContractAlphAmount}(u256To2Byte!(remoteChainId), tokenBridgeForChainTemplateId, encodedState)
    }

    pub fn upgradeContract(vaa: ByteVec) -> () {
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #02)
        let chainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
        assert!(chainId == localChainId)
        let contractCodeLength = u256From2Byte!(byteVecSlice!(payload, 35, 37))
        let mut offset = 37 + contractCodeLength
        let newContractCode = byteVecSlice!(payload, 37, offset)
        let payloadLength = size!(payload)
        if (payloadLength == offset) {
            migrate!(newContractCode)
        } else {
            let prevStateHash = byteVecSlice!(payload, offset, offset + 32)
            offset = offset + 32
            let currentEncodedState = u256To32Byte!(receivedSequence) ++ u256To32Byte!(sendSequence)
            assert!(prevStateHash == blake2b!(currentEncodedState))
            let stateLength = u256From2Byte!(byteVecSlice!(payload, offset, offset + 2))
            offset = offset + 2
            let newContractState = byteVecSlice!(payload, offset, offset + stateLength)
            offset = offset + stateLength
            assert!(payloadLength == offset)
            migrateWithFields!(newContractCode, newContractState)
        }
    }

    @using(preapprovedAssets = true)
    pub fn attestToken(payer: Address, tokenId: ByteVec, nonce: ByteVec, consistencyLevel: U256) -> () {
        assert!(size!(tokenId) == 32)
        assert!(size!(nonce) == 4)

        let token = ERC20Token(tokenId)
        let symbol = token.symbol()
        let symbolSize = size!(symbol)
        assert!(symbolSize <= 32)
        let name = token.name()
        let nameSize = size!(name)
        assert!(nameSize <= 32)

        let payload = #02 ++ // payloadId
            tokenId ++
            u256To2Byte!(localChainId) ++
            u256To1Byte!(token.decimals()) ++
            zeros!(32 - symbolSize) ++ symbol ++
            zeros!(32 - nameSize) ++ name

        let governance = Governance(governanceId)
        governance.publishWormholeMessage{payer -> governance.getMessageFee()}(payer, nextSendSequence(), nonce, payload, consistencyLevel)
    }

    fn nextSendSequence() -> (U256) {
        let current = sendSequence
        sendSequence = sendSequence + 1
        return current
    }

    @using(preapprovedAssets = true)
    pub fn transferLocalToken(
        fromAddress: Address,
        localTokenId: ByteVec,
        toChainId: U256,
        toAddress: ByteVec,
        tokenAmount: U256,
        arbiterFee: U256,
        nonce: ByteVec,
        consistencyLevel: U256 // TODO: Do we need to limit the minimum confirmation
    ) -> () {
        assert!(toChainId != localChainId)
        let tokenBridgeForChainId = subContractId!(u256To2Byte!(toChainId))
        let tokenWrapperId = blake2b!(blake2b!(localTokenId ++ tokenBridgeForChainId))
        let tokenWrapper = TokenWrapper(tokenWrapperId)
        let payload = tokenWrapper.transfer{fromAddress -> localTokenId: tokenAmount}(fromAddress, toAddress, tokenAmount, arbiterFee, nonce, consistencyLevel)
        let governance = Governance(governanceId)
        governance.publishWormholeMessage{fromAddress -> governance.getMessageFee()}(fromAddress, nextSendSequence(), nonce, payload, consistencyLevel)
    }

    @using(preapprovedAssets = true)
    pub fn transferRemoteToken(
        fromAddress: Address,
        tokenWrapperId: ByteVec,
        wrappedTokenId: ByteVec,
        toChainId: U256,
        toAddress: ByteVec,
        tokenAmount: U256,
        arbiterFee: U256,
        nonce: ByteVec,
        consistencyLevel: U256 // TODO: Do we need to limit the minimum confirmation
    ) -> () {
        assert!(toChainId != localChainId)
        let tokenBridgeForChainId = subContractId!(u256To2Byte!(toChainId))
        let expectedTokenWrapperId = blake2b!(blake2b!(wrappedTokenId ++ tokenBridgeForChainId))
        assert!(expectedTokenWrapperId == tokenWrapperId)
        let tokenWrapper = TokenWrapper(tokenWrapperId)
        let payload = tokenWrapper.transfer{fromAddress -> tokenWrapperId: tokenAmount}(fromAddress, toAddress, tokenAmount, arbiterFee, nonce, consistencyLevel)
        let governance = Governance(governanceId)
        governance.publishWormholeMessage{fromAddress -> governance.getMessageFee()}(fromAddress, nextSendSequence(), nonce, payload, consistencyLevel)
    }

    pub fn destroyUndoneSequenceContracts(vaa: ByteVec) -> () {
        let payload = verifyGovernanceVAA(vaa)
        checkModuleAndAction(payload, 0, #f0)
        let remoteChainIdBytes = byteVecSlice!(payload, 33, 35)
        let length = u256From2Byte!(byteVecSlice!(payload, 35, 37))
        assert!(length > 0)
        let payloadSize = 37 + length * 8
        assert!(size!(payload) == payloadSize)
        let paths = byteVecSlice!(payload, 37, payloadSize)

        let tokenBridgeForChainId = subContractId!(remoteChainIdBytes)
        TokenBridgeForChain(tokenBridgeForChainId).destroyUndoneSequenceContracts(paths)
    }
}
