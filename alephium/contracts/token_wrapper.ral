import "token_bridge.ral"
import "token_bridge_for_chain.ral"
import "token_interface.ral"
import "math.ral"

TxContract TokenWrapper(
    tokenBridgeId: ByteVec,
    tokenBridgeForChainId: ByteVec,
    localChainId: U256,
    remoteChainId: U256,
    tokenContractId: ByteVec,
    isLocalToken: Bool,
    symbol_: ByteVec,
    name_: ByteVec,
    decimals_: U256
) extends Math() implements ERC20Token {
    pub fn name() -> ByteVec {
        return name_
    }

    pub fn symbol() -> ByteVec {
        return symbol_
    }

    pub fn decimals() -> U256 {
        return decimals_
    }

    pub fn totalSupply() -> U256 {
        if (isLocalToken) {
            let token = ERC20Token(tokenContractId)
            return token.totalSupply()
        }
        return 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    }

    fn getTokenId() -> ByteVec {
        if (isLocalToken) {
            return tokenContractId
        }
        return selfContractId!()
    }

    pub fn getRemoteChainId() -> U256 {
        return remoteChainId
    }

    fn getTokenChainId() -> U256 {
        if (isLocalToken) {
            return localChainId
        }
        return remoteChainId
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn transfer(
        fromAddress: Address,
        toAddress: ByteVec,
        amount: U256,
        arbiterFee: U256,
        nonce: ByteVec,
        consistencyLevel: U256
    ) -> () {
        assert!(size!(toAddress) == 32)
        assert!(size!(nonce) == 4)

        let normalizedAmount = normalizeAmount(amount, decimals_)
        let normalizedFee = normalizeAmount(arbiterFee, decimals_)
        assert!(normalizedFee < normalizedAmount)

        let transferAmount = deNormalizeAmount(normalizedAmount, decimals_)
        transferTokenToSelf!(fromAddress, getTokenId(), transferAmount)

        let tokenChainId = getTokenChainId()
        let payload = #01 ++ // payloadId
            u256To32Byte!(normalizedAmount) ++
            tokenContractId ++
            u256To2Byte!(tokenChainId) ++
            toAddress ++
            u256To2Byte!(remoteChainId) ++
            u256To32Byte!(normalizedFee)

        let tokenBridge = TokenBridge(tokenBridgeId)
        approveAlph!(fromAddress, tokenBridge.getMessageFee())
        tokenBridge.publishTransfer(fromAddress, payload, nonce, consistencyLevel)
    }

    fn getTransferAmount(amount: U256, arbiterFee: U256) -> (U256, U256) {
        let denomalizedAmount = deNormalizeAmount(amount, decimals_)
        let denomalizedFee = deNormalizeAmount(arbiterFee, decimals_)
        assert!(denomalizedAmount > denomalizedFee)
        let transferAmount = denomalizedAmount - denomalizedFee
        return transferAmount, denomalizedFee
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn completeTransfer(vaa: ByteVec, caller: Address) -> () {
        let tokenBridgeForChain = TokenBridgeForChain(tokenBridgeForChainId)
        let (msgTokenId, msgTokenChainId, toAddress, amount, arbiterFee) = tokenBridgeForChain.parseTransfer(vaa)
        assert!(msgTokenId == tokenContractId)
        assert!(msgTokenChainId == getTokenChainId())

        let (transferAmount, transferFee) = getTransferAmount(amount, arbiterFee)
        let recipient = byteVecToAddress!(#00 ++ toAddress)
        let tokenId = getTokenId()
        transferAlph!(caller, recipient, 1000000000000) // dustAmount
        transferTokenFromSelf!(recipient, tokenId, transferAmount)
        if (transferFee > 0) {
            transferTokenFromSelf!(caller, tokenId, transferFee)
        }
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn completeUndoneTransfer(caller: Address, toAddress: ByteVec, amount: U256, arbiterFee: U256) -> () {
        assert!(callerContractId!() == tokenBridgeId)
        let (transferAmount, transferFee) = getTransferAmount(amount, arbiterFee)
        let recipient = byteVecToAddress!(#00 ++ toAddress)
        let tokenId = getTokenId()
        transferAlph!(caller, recipient, 1000000000000) // dustAmount
        transferTokenFromSelf!(recipient, tokenId, transferAmount)
        if (transferFee > 0) {
            transferTokenFromSelf!(caller, tokenId, transferFee)
        }
    }
}
