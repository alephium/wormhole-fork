import "undone_sequence.ral"
import "init_undone_sequence_interface.ral"
import "event_emitter.ral"

// sequence started from 0, set `next = 0` when init contract state
TxContract Sequence(
    mut next: U256,
    mut next1: U256, // TODO: better name
    mut next2: U256,
    mut undoneSequenceId: ByteVec
) extends InitUndoneSequence {
    fn initialized() -> Bool {
        return undoneSequenceId != #
    }

    pub fn init(contractId: ByteVec) -> () {
        assert!(!initialized())
        undoneSequenceId = contractId
        let undoneSequence = UndoneSequence(contractId)
        assert!(undoneSequence.getUndoneList() == #)
        assert!(undoneSequence.getOwner() == selfContractId!())
        assert!(contractCodeHash!(contractId) == #{{ undoneSequenceCodeHash }})
    }

    pub fn getNext() -> U256 {
        return next 
    }

    pub fn getNext1() -> U256 {
        return next1
    }

    pub fn getNext2() -> U256 {
        return next2
    }

    fn compact(seq: U256) -> () {
        if (next1 != 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {
            let undoneSequence = UndoneSequence(undoneSequenceId)
            let removed = undoneSequence.addToUndone(next, seq, next1)
            let eventEmitter = EventEmitter(#{{ eventEmitterId }})
            eventEmitter.publishUndoneSequenceRemoved(removed)
        }
        next = next + 256
        next1 = next2
        next2 = 0
    }

    fn setExecuted(pos: U256, offset: U256, current: U256) -> U256 {
        let shift = pos * 8
        let value = (current >> shift) & 0xff
        let flag = 1 << offset
        assert!(value & flag == 0)
        let executed = value | flag
        return current | (executed << shift)
    }

    fn checkSequence(seq: U256) -> () {
        assert!(initialized())
        if (seq < next) {
            let undoneSequence = UndoneSequence(undoneSequenceId)
            assert!(undoneSequence.trySetDone(seq))
            return
        }

        if (seq >= (next + 512)) {
            compact(seq)
        }

        assert!(seq < (next + 512))
        let seqIndex = seq - next
        let pos = seqIndex / 8
        let offset = seqIndex % 8
        if (pos < 32) {
            next1 = setExecuted(pos, offset, next1)
        } else {
            next2 = setExecuted(pos - 32, offset, next2)
        }
    }
}