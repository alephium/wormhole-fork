Abstract Contract Math() {
    @using(readonly = true)
    pub fn pow(x: U256, y: U256) -> (U256) {
        let mut i = 0
        let mut result = 1
        while (i < y) {
            result = result * x
            i = i + 1
        }
        return result
    }

    @using(readonly = true)
    pub fn normalizeAmount(amount: U256, decimals: U256) -> (U256) {
        if (decimals > 8) {
            return amount / pow(10, decimals - 8)
        }
        return amount
    }

    @using(readonly = true)
    pub fn deNormalizeAmount(amount: U256, decimals: U256) -> (U256) {
        if (decimals > 8) {
            return amount * pow(10, decimals - 8)
        }
        return amount
    }
}