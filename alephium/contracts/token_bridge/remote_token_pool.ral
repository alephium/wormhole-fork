import "bridge_token_pool.ral"

Contract RemoteTokenPool(
    tokenBridgeId: ByteVec,
    tokenChainId: U256, // remote token chain id
    bridgeTokenId: ByteVec, // remote token id
    mut totalBridged: U256,
    symbol_: ByteVec,
    name_: ByteVec,
    decimals_: U256
) extends BridgeTokenPool(tokenChainId, bridgeTokenId, decimals_) {
    pub fn name() -> ByteVec {
        return name_
    }

    pub fn symbol() -> ByteVec {
        return symbol_
    }

    pub fn decimals() -> U256 {
        return decimals_
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn transfer(
        fromAddress: Address,
        toAddress: ByteVec,
        amount: U256,
        arbiterFee: U256,
        nonce: ByteVec
    ) -> ByteVec {
        checkPermission!(callerContractId!() == tokenBridgeId, ErrorCodes.InvalidCaller)
        let (payload, totalAmount) = prepareTransfer(toAddress, amount, arbiterFee, nonce)

        transferTokenToSelf!(fromAddress, selfTokenId!(), totalAmount)
        totalBridged = totalBridged - totalAmount

        return payload
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn completeTransfer(
        emitterChainId: U256,
        amount: U256,
        vaaTokenId: ByteVec,
        vaaTokenChainId: U256,
        recipient: Address,
        normalizedArbiterFee: U256,
        caller: Address
    ) -> () {
        let (transferAmount, arbiterFee) = prepareCompleteTransfer(
            callerContractId!(), emitterChainId, amount, vaaTokenId, vaaTokenChainId, normalizedArbiterFee
        )

        if (caller != recipient) {
            transferAlph!(caller, recipient, dustAmount!())
        }
        let tokenId = selfContractId!()
        transferTokenFromSelf!(recipient, tokenId, transferAmount)
        if (arbiterFee > 0) {
            transferTokenFromSelf!(caller, tokenId, arbiterFee)
        }
        totalBridged = totalBridged + transferAmount + arbiterFee
    }
}
