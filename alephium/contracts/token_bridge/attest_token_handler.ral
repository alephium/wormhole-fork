Contract AttestTokenHandler(
  governance: Governance,
  localTokenBridge: TokenBridge,
  targetChainId: U256,
  targetTokenBridge: TokenBridge,
  mut receivedSequence: U256,
  isLocalHandler: Bool
) extends Constants(), TokenBridgeConstants() {
  @using(updateFields = true)
  fn parseAttestToken(vaa: ByteVec) -> (ByteVec, ByteVec, ByteVec, U256, U256) {
    let (emitterChainId, vaaTargetChainId, emitterAddress, msgSequence, payload) = governance.parseAndVerifyVAA(vaa, false)
    assert!(emitterChainId == targetChainId, ErrorCodes.InvalidEmitChainId)
    assert!(emitterAddress == tokenId!(targetTokenBridge), ErrorCodes.InvalidEmitAddress)
    assert!(vaaTargetChainId == 0, ErrorCodes.InvalidTargetChainId)
    assert!(msgSequence >= receivedSequence, ErrorCodes.InvalidSequence)
    receivedSequence = msgSequence + 1

    assert!(byteVecSlice!(payload, 0, 1) == PayloadId.AttestToken, ErrorCodes.InvalidPayloadId)
    let tokenId = byteVecSlice!(payload, 1, 33)
    let tokenChainId = u256From2Byte!(byteVecSlice!(payload, 33, 35))
    assert!(tokenChainId == targetChainId, ErrorCodes.InvalidAttestTokenMessage)
    let decimals = u256From1Byte!(byteVecSlice!(payload, 35, 36))
    let symbol = byteVecSlice!(payload, 36, 68)
    let name = byteVecSlice!(payload, 68, 100)
    assert!(size!(payload) == 100, ErrorCodes.InvalidMessageSize)
    return tokenId, symbol, name, decimals, msgSequence
  }

  @using(preapprovedAssets = true)
  pub fn createLocalTokenPool(
    vaa: ByteVec,
    payer: Address,
    createContractAlphAmount: U256,
    tokenAmount: U256
  ) -> () {
    assert!(isLocalHandler, ErrorCodes.InvalidAttestTokenHandler)
    let (tokenId, _, _, decimals, _) = parseAttestToken(vaa)
    localTokenBridge.createLocalTokenPool{payer -> ALPH: createContractAlphAmount, tokenId: tokenAmount}(
      tokenId, decimals, payer, createContractAlphAmount
    )
  }

  @using(preapprovedAssets = true)
  pub fn createRemoteTokenPool(
    vaa: ByteVec,
    payer: Address,
    createContractAlphAmount: U256
  ) -> () {
    assert!(!isLocalHandler, ErrorCodes.InvalidAttestTokenHandler)
    let (tokenId, symbol, name, decimals, msgSequence) = parseAttestToken(vaa)
    localTokenBridge.createRemoteTokenPool{payer -> ALPH: createContractAlphAmount}(
      tokenId, targetChainId, decimals, symbol, name, msgSequence, payer, createContractAlphAmount
    )
  }

  pub fn updateRemoteTokenPool(vaa: ByteVec) -> () {
    assert!(!isLocalHandler, ErrorCodes.InvalidAttestTokenHandler)
    let (tokenId, symbol, name, _, msgSequence) = parseAttestToken(vaa)
    localTokenBridge.updateRemoteTokenPool(tokenId, targetChainId, symbol, name, msgSequence)
  }
}
