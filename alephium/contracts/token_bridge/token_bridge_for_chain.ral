Contract TokenBridgeForChain(
    governanceContractId: ByteVec,
    localChainId: U256,
    localTokenBridgeId: ByteVec, // local chain token bridge contract id
    remoteChainId: U256,
    remoteTokenBridgeId: ByteVec, // remote chain token bridge contract id
    mut next: U256,
    mut next1: U256,
    mut next2: U256,
    undoneSequenceTemplateId: ByteVec, // used for create contract by copyCreateContract
    refundAddress: Address,
    mut sendSequence: U256
) extends Sequence(next, next1, next2, undoneSequenceTemplateId, refundAddress), Constants(), TokenBridgeConstants() {
    pub fn nextSendSequence() -> U256 {
        checkCaller!(callerContractId!() == localTokenBridgeId, ErrorCodes.InvalidCaller)
        let msgSequence = sendSequence
        sendSequence = sendSequence + 1
        return msgSequence
    }

    fn checkCompleteTransfer(vaa: ByteVec) -> (Bool, ByteVec) {
        let governance = Governance(governanceContractId)
        let (emitterChainId, targetChainId, emitterAddress, msgSequence, payload) = governance.parseAndVerifyVAA(vaa, false)
        assert!(emitterChainId == remoteChainId, ErrorCodes.InvalidEmitChainId)
        assert!(emitterAddress == remoteTokenBridgeId, ErrorCodes.InvalidEmitAddress)
        assert!(targetChainId == localChainId, ErrorCodes.InvalidTargetChainId)
        return checkSequence(msgSequence), payload
    }

    @using(readonly = true)
    fn parseCompleteTransfer(payload: ByteVec) -> (U256, ByteVec, U256, Address, U256) {
        assert!(byteVecSlice!(payload, 0, 1) == PayloadId.Transfer, ErrorCodes.InvalidPayloadId)
        let amount = u256From32Byte!(byteVecSlice!(payload, 1, 33))
        let vaaTokenId = byteVecSlice!(payload, 33, 65)
        let vaaTokenChainId = u256From2Byte!(byteVecSlice!(payload, 65, 67))
        let toAddress = byteVecSlice!(payload, 67, 99)
        let normalizedArbiterFee = u256From32Byte!(byteVecSlice!(payload, 99, 131))
        assert!(size!(payload) == 131, ErrorCodes.InvalidMessageSize)
        let recipient = byteVecToAddress!(#00 ++ toAddress)
        return amount, vaaTokenId, vaaTokenChainId, recipient, normalizedArbiterFee
    }

    @using(preapprovedAssets = true)
    pub fn completeTransfer(vaa: ByteVec, caller: Address) -> () {
        let (sequenceReady, payload) = checkCompleteTransfer(vaa)
        if (!sequenceReady) { // too many undone sequences in between, compact those sequences first
            return
        }

        let (amount, vaaTokenId, vaaTokenChainId, recipient, normalizedArbiterFee) = parseCompleteTransfer(payload)
        let path = Path.TokenPool ++ u256To2Byte!(vaaTokenChainId) ++ vaaTokenId
        let tokenPoolId = subContractIdOf!(TokenBridge(localTokenBridgeId), path)
        let tokenPool = TokenPool(tokenPoolId)
        tokenPool.completeTransfer{caller -> dustAmount!()}(
            remoteChainId, amount, vaaTokenId, vaaTokenChainId, recipient, normalizedArbiterFee, caller
        )
    }

    pub fn destroyUndoneSequenceContracts(paths: ByteVec) -> () {
        checkCaller!(callerContractId!() == localTokenBridgeId, ErrorCodes.InvalidCaller)
        let length = size!(paths)
        for (let mut index = 0; index < length; index = index + 8) {
            let undoneSequenceId = subContractId!(byteVecSlice!(paths, index, index + 8))
            UndoneSequence(undoneSequenceId).destroy()
            index = index + 8
        }
    }
}
