Contract LocalTokenPool(
    tokenBridgeId: ByteVec,
    tokenChainId: U256, // local chain id
    bridgeTokenId: ByteVec, // local token id
    mut totalBridged: U256,
    decimals_: U256 // should be 0
) extends BridgeTokenPool(tokenBridgeId, tokenChainId, bridgeTokenId, totalBridged, decimals_) {
    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn transfer(
        fromAddress: Address,
        toAddress: ByteVec,
        amount: U256,
        arbiterFee: U256,
        nonce: ByteVec
    ) -> ByteVec {
        let (payload, totalAmount) = prepareTransfer(callerContractId!(), toAddress, amount, arbiterFee, nonce)

        transferTokenToSelf!(fromAddress, bridgeTokenId, totalAmount)
        totalBridged = totalBridged + totalAmount

        return payload
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn completeTransfer(
        emitterChainId: U256,
        amount: U256,
        vaaTokenId: ByteVec,
        vaaTokenChainId: U256,
        recipient: Address,
        normalizedArbiterFee: U256,
        caller: Address
    ) -> () {
        let (transferAmount, arbiterFee) = prepareCompleteTransfer(
            callerContractId!(), emitterChainId, amount, vaaTokenId, vaaTokenChainId, normalizedArbiterFee
        )

        if (caller != recipient) {
            transferAlph!(caller, recipient, dustAmount!())
        }
        transferTokenFromSelf!(recipient, bridgeTokenId, transferAmount)
        if (arbiterFee > 0) {
            transferTokenFromSelf!(caller, bridgeTokenId, arbiterFee)
        }
        totalBridged = totalBridged - transferAmount - arbiterFee
    }
}
