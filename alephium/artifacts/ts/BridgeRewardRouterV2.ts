/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as BridgeRewardRouterV2ContractJson } from "../token_bridge/BridgeRewardRouterV2.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace BridgeRewardRouterV2Types {
  export type Fields = {
    alphChainId: bigint;
    rewardAmount: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    completeTransfer: {
      params: CallContractParams<{
        tokenBridgeForChain: HexString;
        vaa: HexString;
        caller: Address;
      }>;
      result: CallContractResult<null>;
    };
    addRewards: {
      params: CallContractParams<{ caller: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    updateRewardAmount: {
      params: CallContractParams<{ newRewardAmount: bigint }>;
      result: CallContractResult<null>;
    };
    updateOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    completeTransfer: {
      params: SignExecuteContractMethodParams<{
        tokenBridgeForChain: HexString;
        vaa: HexString;
        caller: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addRewards: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateRewardAmount: {
      params: SignExecuteContractMethodParams<{ newRewardAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    updateOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  BridgeRewardRouterV2Instance,
  BridgeRewardRouterV2Types.Fields
> {
  encodeFields(fields: BridgeRewardRouterV2Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): BridgeRewardRouterV2Instance {
    return new BridgeRewardRouterV2Instance(address);
  }

  tests = {
    completeTransfer: async (
      params: TestContractParamsWithoutMaps<
        BridgeRewardRouterV2Types.Fields,
        { tokenBridgeForChain: HexString; vaa: HexString; caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    addRewards: async (
      params: TestContractParamsWithoutMaps<
        BridgeRewardRouterV2Types.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addRewards", params, getContractByCodeHash);
    },
    updateRewardAmount: async (
      params: TestContractParamsWithoutMaps<
        BridgeRewardRouterV2Types.Fields,
        { newRewardAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateRewardAmount",
        params,
        getContractByCodeHash
      );
    },
    updateOwner: async (
      params: TestContractParamsWithoutMaps<
        BridgeRewardRouterV2Types.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateOwner", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: BridgeRewardRouterV2Types.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const BridgeRewardRouterV2 = new Factory(
  Contract.fromJson(
    BridgeRewardRouterV2ContractJson,
    "",
    "8f42eca7dec231419f3b3f19e944bd7127d86fdfb35b751c1515c57650c85c07",
    []
  )
);

// Use this class to interact with the blockchain
export class BridgeRewardRouterV2Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BridgeRewardRouterV2Types.State> {
    return fetchContractState(BridgeRewardRouterV2, this);
  }

  view = {
    completeTransfer: async (
      params: BridgeRewardRouterV2Types.CallMethodParams<"completeTransfer">
    ): Promise<
      BridgeRewardRouterV2Types.CallMethodResult<"completeTransfer">
    > => {
      return callMethod(
        BridgeRewardRouterV2,
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    addRewards: async (
      params: BridgeRewardRouterV2Types.CallMethodParams<"addRewards">
    ): Promise<BridgeRewardRouterV2Types.CallMethodResult<"addRewards">> => {
      return callMethod(
        BridgeRewardRouterV2,
        this,
        "addRewards",
        params,
        getContractByCodeHash
      );
    },
    updateRewardAmount: async (
      params: BridgeRewardRouterV2Types.CallMethodParams<"updateRewardAmount">
    ): Promise<
      BridgeRewardRouterV2Types.CallMethodResult<"updateRewardAmount">
    > => {
      return callMethod(
        BridgeRewardRouterV2,
        this,
        "updateRewardAmount",
        params,
        getContractByCodeHash
      );
    },
    updateOwner: async (
      params: BridgeRewardRouterV2Types.CallMethodParams<"updateOwner">
    ): Promise<BridgeRewardRouterV2Types.CallMethodResult<"updateOwner">> => {
      return callMethod(
        BridgeRewardRouterV2,
        this,
        "updateOwner",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    completeTransfer: async (
      params: BridgeRewardRouterV2Types.SignExecuteMethodParams<"completeTransfer">
    ): Promise<
      BridgeRewardRouterV2Types.SignExecuteMethodResult<"completeTransfer">
    > => {
      return signExecuteMethod(
        BridgeRewardRouterV2,
        this,
        "completeTransfer",
        params
      );
    },
    addRewards: async (
      params: BridgeRewardRouterV2Types.SignExecuteMethodParams<"addRewards">
    ): Promise<
      BridgeRewardRouterV2Types.SignExecuteMethodResult<"addRewards">
    > => {
      return signExecuteMethod(
        BridgeRewardRouterV2,
        this,
        "addRewards",
        params
      );
    },
    updateRewardAmount: async (
      params: BridgeRewardRouterV2Types.SignExecuteMethodParams<"updateRewardAmount">
    ): Promise<
      BridgeRewardRouterV2Types.SignExecuteMethodResult<"updateRewardAmount">
    > => {
      return signExecuteMethod(
        BridgeRewardRouterV2,
        this,
        "updateRewardAmount",
        params
      );
    },
    updateOwner: async (
      params: BridgeRewardRouterV2Types.SignExecuteMethodParams<"updateOwner">
    ): Promise<
      BridgeRewardRouterV2Types.SignExecuteMethodResult<"updateOwner">
    > => {
      return signExecuteMethod(
        BridgeRewardRouterV2,
        this,
        "updateOwner",
        params
      );
    },
  };
}
