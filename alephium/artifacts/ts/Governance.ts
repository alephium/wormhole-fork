/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as GovernanceContractJson } from "../Governance.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace GovernanceTypes {
  export type Fields = {
    chainId: bigint;
    governanceChainId: bigint;
    governanceEmitterAddress: HexString;
    tokenBridgeFactory: HexString;
    receivedSequence: bigint;
    messageFee: bigint;
    guardianSets: [HexString, HexString];
    guardianSetIndexes: [bigint, bigint];
    previousGuardianSetExpirationTimeMS: bigint;
  };

  export type State = ContractState<Fields>;

  export type WormholeMessageEvent = ContractEvent<{
    sender: HexString;
    targetChainId: bigint;
    sequence: bigint;
    nonce: HexString;
    payload: HexString;
    consistencyLevel: bigint;
  }>;

  export interface CallMethodTable {
    getMessageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    publishWormholeMessage: {
      params: CallContractParams<{
        payer: Address;
        targetChainId: bigint;
        sequence: bigint;
        nonce: HexString;
        payload: HexString;
        consistencyLevel: bigint;
      }>;
      result: CallContractResult<null>;
    };
    parseAndVerifyVAA: {
      params: CallContractParams<{ data: HexString; isGovernanceVAA: boolean }>;
      result: CallContractResult<
        [bigint, bigint, HexString, bigint, HexString]
      >;
    };
    parseAndVerifyGovernanceVAAGeneric: {
      params: CallContractParams<{
        vaa: HexString;
        targetSequence: bigint;
        coreModule: bigint;
        action: HexString;
      }>;
      result: CallContractResult<[bigint, bigint, HexString]>;
    };
    parseAndVerifyGovernanceVAA: {
      params: CallContractParams<{ vaa: HexString; action: HexString }>;
      result: CallContractResult<[bigint, HexString]>;
    };
    getGuardiansInfo: {
      params: CallContractParams<{ guardianSetIndex: bigint }>;
      result: CallContractResult<HexString>;
    };
    submitContractUpgrade: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    updatePreviousGuardianSet: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    submitNewGuardianSet: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    submitSetMessageFee: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    submitTransferFees: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getMessageFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    publishWormholeMessage: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        targetChainId: bigint;
        sequence: bigint;
        nonce: HexString;
        payload: HexString;
        consistencyLevel: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    parseAndVerifyVAA: {
      params: SignExecuteContractMethodParams<{
        data: HexString;
        isGovernanceVAA: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    parseAndVerifyGovernanceVAAGeneric: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        targetSequence: bigint;
        coreModule: bigint;
        action: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    parseAndVerifyGovernanceVAA: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        action: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getGuardiansInfo: {
      params: SignExecuteContractMethodParams<{ guardianSetIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    submitContractUpgrade: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updatePreviousGuardianSet: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    submitNewGuardianSet: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    submitSetMessageFee: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    submitTransferFees: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  GovernanceInstance,
  GovernanceTypes.Fields
> {
  encodeFields(fields: GovernanceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { WormholeMessage: 0 };
  consts = {
    Version: "01",
    GuardianSetExpireDuration: BigInt("86400000"),
    CoreModule: BigInt("1131377253"),
    ErrorCodes: {
      InvalidEmitChainId: BigInt("0"),
      InvalidEmitAddress: BigInt("1"),
      InvalidMessageSize: BigInt("2"),
      InvalidSequence: BigInt("3"),
      InvalidModule: BigInt("4"),
      InvalidActionId: BigInt("5"),
      InvalidVersion: BigInt("6"),
      InvalidGuardianSetIndex: BigInt("7"),
      InvalidGuardianSetSize: BigInt("8"),
      InvalidSignatureSize: BigInt("9"),
      InvalidSignatureGuardianIndex: BigInt("10"),
      InvalidSignature: BigInt("11"),
      GuardianSetExpired: BigInt("12"),
      InvalidTargetChainId: BigInt("13"),
      ContractStateMismatch: BigInt("14"),
      InvalidRegisterChainMessage: BigInt("15"),
      InvalidTokenId: BigInt("16"),
      InvalidNonceSize: BigInt("17"),
      TokenNotExist: BigInt("18"),
      InvalidTransferTargetChain: BigInt("19"),
      InvalidDestroyUnexecutedSequenceMessage: BigInt("20"),
      InvalidCaller: BigInt("21"),
      ArbiterFeeLessThanAmount: BigInt("22"),
      InvalidAttestTokenMessage: BigInt("23"),
      InvalidPayloadId: BigInt("24"),
      InvalidTransferMessage: BigInt("25"),
      ExpectRemoteToken: BigInt("26"),
      InvalidConsistencyLevel: BigInt("27"),
      InvalidUpdateRefundAddressMessage: BigInt("28"),
      TransferAmountLessThanMessageFee: BigInt("29"),
      InvalidAttestTokenArg: BigInt("30"),
      InvalidAttestTokenHandler: BigInt("31"),
      NotSupported: BigInt("32"),
    },
    ActionId: {
      ContractUpgrade: "01",
      NewGuardianSet: "02",
      NewMessageFee: "03",
      TransferFee: "04",
    },
  };

  at(address: string): GovernanceInstance {
    return new GovernanceInstance(address);
  }

  tests = {
    getMessageFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<GovernanceTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMessageFee", params, getContractByCodeHash);
    },
    publishWormholeMessage: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        {
          payer: Address;
          targetChainId: bigint;
          sequence: bigint;
          nonce: HexString;
          payload: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "publishWormholeMessage",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyVAA: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { data: HexString; isGovernanceVAA: boolean }
      >
    ): Promise<
      TestContractResultWithoutMaps<
        [bigint, bigint, HexString, bigint, HexString]
      >
    > => {
      return testMethod(
        this,
        "parseAndVerifyVAA",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyGovernanceVAAGeneric: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        {
          vaa: HexString;
          targetSequence: bigint;
          coreModule: bigint;
          action: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint, HexString]>> => {
      return testMethod(
        this,
        "parseAndVerifyGovernanceVAAGeneric",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyGovernanceVAA: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { vaa: HexString; action: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, HexString]>> => {
      return testMethod(
        this,
        "parseAndVerifyGovernanceVAA",
        params,
        getContractByCodeHash
      );
    },
    getGuardiansInfo: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { guardianSetIndex: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getGuardiansInfo",
        params,
        getContractByCodeHash
      );
    },
    submitContractUpgrade: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "submitContractUpgrade",
        params,
        getContractByCodeHash
      );
    },
    updatePreviousGuardianSet: async (
      params: Omit<
        TestContractParamsWithoutMaps<GovernanceTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updatePreviousGuardianSet",
        params,
        getContractByCodeHash
      );
    },
    submitNewGuardianSet: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "submitNewGuardianSet",
        params,
        getContractByCodeHash
      );
    },
    submitSetMessageFee: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "submitSetMessageFee",
        params,
        getContractByCodeHash
      );
    },
    submitTransferFees: async (
      params: TestContractParamsWithoutMaps<
        GovernanceTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "submitTransferFees",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: GovernanceTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Governance = new Factory(
  Contract.fromJson(
    GovernanceContractJson,
    "",
    "7ebf06319b04aef7a7013a42ea2b7fccb3fc86178c27240aa2b2678d9068d9c7",
    []
  )
);
registerContract(Governance);

// Use this class to interact with the blockchain
export class GovernanceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<GovernanceTypes.State> {
    return fetchContractState(Governance, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWormholeMessageEvent(
    options: EventSubscribeOptions<GovernanceTypes.WormholeMessageEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Governance.contract,
      this,
      options,
      "WormholeMessage",
      fromCount
    );
  }

  view = {
    getMessageFee: async (
      params?: GovernanceTypes.CallMethodParams<"getMessageFee">
    ): Promise<GovernanceTypes.CallMethodResult<"getMessageFee">> => {
      return callMethod(
        Governance,
        this,
        "getMessageFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    publishWormholeMessage: async (
      params: GovernanceTypes.CallMethodParams<"publishWormholeMessage">
    ): Promise<GovernanceTypes.CallMethodResult<"publishWormholeMessage">> => {
      return callMethod(
        Governance,
        this,
        "publishWormholeMessage",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyVAA: async (
      params: GovernanceTypes.CallMethodParams<"parseAndVerifyVAA">
    ): Promise<GovernanceTypes.CallMethodResult<"parseAndVerifyVAA">> => {
      return callMethod(
        Governance,
        this,
        "parseAndVerifyVAA",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyGovernanceVAAGeneric: async (
      params: GovernanceTypes.CallMethodParams<"parseAndVerifyGovernanceVAAGeneric">
    ): Promise<
      GovernanceTypes.CallMethodResult<"parseAndVerifyGovernanceVAAGeneric">
    > => {
      return callMethod(
        Governance,
        this,
        "parseAndVerifyGovernanceVAAGeneric",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyGovernanceVAA: async (
      params: GovernanceTypes.CallMethodParams<"parseAndVerifyGovernanceVAA">
    ): Promise<
      GovernanceTypes.CallMethodResult<"parseAndVerifyGovernanceVAA">
    > => {
      return callMethod(
        Governance,
        this,
        "parseAndVerifyGovernanceVAA",
        params,
        getContractByCodeHash
      );
    },
    getGuardiansInfo: async (
      params: GovernanceTypes.CallMethodParams<"getGuardiansInfo">
    ): Promise<GovernanceTypes.CallMethodResult<"getGuardiansInfo">> => {
      return callMethod(
        Governance,
        this,
        "getGuardiansInfo",
        params,
        getContractByCodeHash
      );
    },
    submitContractUpgrade: async (
      params: GovernanceTypes.CallMethodParams<"submitContractUpgrade">
    ): Promise<GovernanceTypes.CallMethodResult<"submitContractUpgrade">> => {
      return callMethod(
        Governance,
        this,
        "submitContractUpgrade",
        params,
        getContractByCodeHash
      );
    },
    updatePreviousGuardianSet: async (
      params?: GovernanceTypes.CallMethodParams<"updatePreviousGuardianSet">
    ): Promise<
      GovernanceTypes.CallMethodResult<"updatePreviousGuardianSet">
    > => {
      return callMethod(
        Governance,
        this,
        "updatePreviousGuardianSet",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    submitNewGuardianSet: async (
      params: GovernanceTypes.CallMethodParams<"submitNewGuardianSet">
    ): Promise<GovernanceTypes.CallMethodResult<"submitNewGuardianSet">> => {
      return callMethod(
        Governance,
        this,
        "submitNewGuardianSet",
        params,
        getContractByCodeHash
      );
    },
    submitSetMessageFee: async (
      params: GovernanceTypes.CallMethodParams<"submitSetMessageFee">
    ): Promise<GovernanceTypes.CallMethodResult<"submitSetMessageFee">> => {
      return callMethod(
        Governance,
        this,
        "submitSetMessageFee",
        params,
        getContractByCodeHash
      );
    },
    submitTransferFees: async (
      params: GovernanceTypes.CallMethodParams<"submitTransferFees">
    ): Promise<GovernanceTypes.CallMethodResult<"submitTransferFees">> => {
      return callMethod(
        Governance,
        this,
        "submitTransferFees",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getMessageFee: async (
      params: GovernanceTypes.SignExecuteMethodParams<"getMessageFee">
    ): Promise<GovernanceTypes.SignExecuteMethodResult<"getMessageFee">> => {
      return signExecuteMethod(Governance, this, "getMessageFee", params);
    },
    publishWormholeMessage: async (
      params: GovernanceTypes.SignExecuteMethodParams<"publishWormholeMessage">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"publishWormholeMessage">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "publishWormholeMessage",
        params
      );
    },
    parseAndVerifyVAA: async (
      params: GovernanceTypes.SignExecuteMethodParams<"parseAndVerifyVAA">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"parseAndVerifyVAA">
    > => {
      return signExecuteMethod(Governance, this, "parseAndVerifyVAA", params);
    },
    parseAndVerifyGovernanceVAAGeneric: async (
      params: GovernanceTypes.SignExecuteMethodParams<"parseAndVerifyGovernanceVAAGeneric">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"parseAndVerifyGovernanceVAAGeneric">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "parseAndVerifyGovernanceVAAGeneric",
        params
      );
    },
    parseAndVerifyGovernanceVAA: async (
      params: GovernanceTypes.SignExecuteMethodParams<"parseAndVerifyGovernanceVAA">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"parseAndVerifyGovernanceVAA">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "parseAndVerifyGovernanceVAA",
        params
      );
    },
    getGuardiansInfo: async (
      params: GovernanceTypes.SignExecuteMethodParams<"getGuardiansInfo">
    ): Promise<GovernanceTypes.SignExecuteMethodResult<"getGuardiansInfo">> => {
      return signExecuteMethod(Governance, this, "getGuardiansInfo", params);
    },
    submitContractUpgrade: async (
      params: GovernanceTypes.SignExecuteMethodParams<"submitContractUpgrade">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"submitContractUpgrade">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "submitContractUpgrade",
        params
      );
    },
    updatePreviousGuardianSet: async (
      params: GovernanceTypes.SignExecuteMethodParams<"updatePreviousGuardianSet">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"updatePreviousGuardianSet">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "updatePreviousGuardianSet",
        params
      );
    },
    submitNewGuardianSet: async (
      params: GovernanceTypes.SignExecuteMethodParams<"submitNewGuardianSet">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"submitNewGuardianSet">
    > => {
      return signExecuteMethod(
        Governance,
        this,
        "submitNewGuardianSet",
        params
      );
    },
    submitSetMessageFee: async (
      params: GovernanceTypes.SignExecuteMethodParams<"submitSetMessageFee">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"submitSetMessageFee">
    > => {
      return signExecuteMethod(Governance, this, "submitSetMessageFee", params);
    },
    submitTransferFees: async (
      params: GovernanceTypes.SignExecuteMethodParams<"submitTransferFees">
    ): Promise<
      GovernanceTypes.SignExecuteMethodResult<"submitTransferFees">
    > => {
      return signExecuteMethod(Governance, this, "submitTransferFees", params);
    },
  };

  async multicall<Calls extends GovernanceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<GovernanceTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends GovernanceTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<GovernanceTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | GovernanceTypes.MultiCallParams
      | GovernanceTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      Governance,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
