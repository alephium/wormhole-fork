/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as BridgeRewardRouterContractJson } from "../token_bridge/BridgeRewardRouter.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace BridgeRewardRouterTypes {
  export type Fields = {
    alphChainId: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  BridgeRewardRouterInstance,
  BridgeRewardRouterTypes.Fields
> {
  at(address: string): BridgeRewardRouterInstance {
    return new BridgeRewardRouterInstance(address);
  }

  tests = {
    completeTransfer: async (
      params: TestContractParams<
        BridgeRewardRouterTypes.Fields,
        { tokenBridgeForChain: HexString; vaa: HexString; caller: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "completeTransfer", params);
    },
    addRewards: async (
      params: TestContractParams<
        BridgeRewardRouterTypes.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "addRewards", params);
    },
  };
}

// Use this object to test and deploy the contract
export const BridgeRewardRouter = new Factory(
  Contract.fromJson(
    BridgeRewardRouterContractJson,
    "",
    "213e716a4d9125a71678f579c770a9721e5d4b1c95822f2f623f3ae27cc0f76b"
  )
);

// Use this class to interact with the blockchain
export class BridgeRewardRouterInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BridgeRewardRouterTypes.State> {
    return fetchContractState(BridgeRewardRouter, this);
  }
}
