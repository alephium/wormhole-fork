/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as SetMessageFeeScriptJson } from "../governance_scripts/SetMessageFee.ral.json";
import { default as TransferFeeScriptJson } from "../governance_scripts/TransferFee.ral.json";
import { default as UpdateGuardianSetScriptJson } from "../governance_scripts/UpdateGuardianSet.ral.json";
import { default as UpdateGovernanceContractScriptJson } from "../governance_scripts/UpdateGovernanceContract.ral.json";
import { default as GetTokenScriptJson } from "../tests/GetToken.ral.json";
import { default as AddRewardsScriptJson } from "../token_bridge_scripts/AddRewards.ral.json";
import { default as AttestTokenScriptJson } from "../token_bridge_scripts/AttestToken.ral.json";
import { default as CompleteTransferScriptJson } from "../token_bridge_scripts/CompleteTransfer.ral.json";
import { default as CompleteTransferWithRewardScriptJson } from "../token_bridge_scripts/CompleteTransferWithReward.ral.json";
import { default as CreateLocalAttestTokenHandlerScriptJson } from "../token_bridge_scripts/CreateLocalAttestTokenHandler.ral.json";
import { default as CreateLocalTokenPoolScriptJson } from "../token_bridge_scripts/CreateLocalTokenPool.ral.json";
import { default as CreateRemoteTokenPoolScriptJson } from "../token_bridge_scripts/CreateRemoteTokenPool.ral.json";
import { default as DepositScriptJson } from "../token_bridge_scripts/Deposit.ral.json";
import { default as DestroyUnexecutedSequenceContractsScriptJson } from "../token_bridge_scripts/DestroyUnexecutedSequenceContracts.ral.json";
import { default as RegisterChainScriptJson } from "../token_bridge_scripts/RegisterChain.ral.json";
import { default as TransferLocalScriptJson } from "../token_bridge_scripts/TransferLocal.ral.json";
import { default as TransferRemoteScriptJson } from "../token_bridge_scripts/TransferRemote.ral.json";
import { default as UpdateMinimalConsistencyLevelScriptJson } from "../token_bridge_scripts/UpdateMinimalConsistencyLevel.ral.json";
import { default as UpdateRefundAddressScriptJson } from "../token_bridge_scripts/UpdateRefundAddress.ral.json";
import { default as UpdateRemoteTokenPoolScriptJson } from "../token_bridge_scripts/UpdateRemoteTokenPool.ral.json";
import { default as UpgradeTokenBridgeContractScriptJson } from "../token_bridge_scripts/UpgradeTokenBridgeContract.ral.json";

export const SetMessageFee = new ExecutableScript<{
  governance: HexString;
  vaa: HexString;
}>(Script.fromJson(SetMessageFeeScriptJson));
export const TransferFee = new ExecutableScript<{
  governance: HexString;
  vaa: HexString;
}>(Script.fromJson(TransferFeeScriptJson));
export const UpdateGuardianSet = new ExecutableScript<{
  governance: HexString;
  vaa: HexString;
}>(Script.fromJson(UpdateGuardianSetScriptJson));
export const UpdateGovernanceContract = new ExecutableScript<{
  governance: HexString;
  vaa: HexString;
}>(Script.fromJson(UpdateGovernanceContractScriptJson));
export const GetToken = new ExecutableScript<{
  sender: Address;
  token: HexString;
  amount: bigint;
  factor: bigint;
}>(Script.fromJson(GetTokenScriptJson));
export const AddRewards = new ExecutableScript<{
  bridgeRewardRouter: HexString;
  amount: bigint;
}>(Script.fromJson(AddRewardsScriptJson));
export const AttestToken = new ExecutableScript<{
  payer: Address;
  tokenBridge: HexString;
  localTokenId: HexString;
  decimals: bigint;
  symbol: HexString;
  name: HexString;
  nonce: HexString;
  consistencyLevel: bigint;
}>(Script.fromJson(AttestTokenScriptJson));
export const CompleteTransfer = new ExecutableScript<{
  tokenBridgeForChain: HexString;
  vaa: HexString;
}>(Script.fromJson(CompleteTransferScriptJson));
export const CompleteTransferWithReward = new ExecutableScript<{
  bridgeRewardRouter: HexString;
  tokenBridgeForChain: HexString;
  vaa: HexString;
}>(Script.fromJson(CompleteTransferWithRewardScriptJson));
export const CreateLocalAttestTokenHandler = new ExecutableScript<{
  tokenBridge: HexString;
  payer: Address;
  alphAmount: bigint;
}>(Script.fromJson(CreateLocalAttestTokenHandlerScriptJson));
export const CreateLocalTokenPool = new ExecutableScript<{
  payer: Address;
  attestTokenHandler: HexString;
  localTokenId: HexString;
  vaa: HexString;
  alphAmount: bigint;
}>(Script.fromJson(CreateLocalTokenPoolScriptJson));
export const CreateRemoteTokenPool = new ExecutableScript<{
  payer: Address;
  attestTokenHandler: HexString;
  vaa: HexString;
  alphAmount: bigint;
}>(Script.fromJson(CreateRemoteTokenPoolScriptJson));
export const Deposit = new ExecutableScript<{
  tokenBridgeForChain: HexString;
  payer: Address;
  amount: bigint;
}>(Script.fromJson(DepositScriptJson));
export const DestroyUnexecutedSequenceContracts = new ExecutableScript<{
  tokenBridge: HexString;
  vaa: HexString;
}>(Script.fromJson(DestroyUnexecutedSequenceContractsScriptJson));
export const RegisterChain = new ExecutableScript<{
  payer: Address;
  tokenBridge: HexString;
  vaa: HexString;
  alphAmount: bigint;
}>(Script.fromJson(RegisterChainScriptJson));
export const TransferLocal = new ExecutableScript<{
  tokenBridge: HexString;
  fromAddress: Address;
  localTokenId: HexString;
  alphChainId: bigint;
  toChainId: bigint;
  toAddress: HexString;
  tokenAmount: bigint;
  arbiterFee: bigint;
  nonce: HexString;
  consistencyLevel: bigint;
}>(Script.fromJson(TransferLocalScriptJson));
export const TransferRemote = new ExecutableScript<{
  tokenBridge: HexString;
  fromAddress: Address;
  tokenPoolId: HexString;
  remoteTokenId: HexString;
  tokenChainId: bigint;
  toChainId: bigint;
  toAddress: HexString;
  tokenAmount: bigint;
  arbiterFee: bigint;
  nonce: HexString;
  consistencyLevel: bigint;
}>(Script.fromJson(TransferRemoteScriptJson));
export const UpdateMinimalConsistencyLevel = new ExecutableScript<{
  tokenBridge: HexString;
  vaa: HexString;
}>(Script.fromJson(UpdateMinimalConsistencyLevelScriptJson));
export const UpdateRefundAddress = new ExecutableScript<{
  tokenBridge: HexString;
  vaa: HexString;
}>(Script.fromJson(UpdateRefundAddressScriptJson));
export const UpdateRemoteTokenPool = new ExecutableScript<{
  attestTokenHandler: HexString;
  vaa: HexString;
}>(Script.fromJson(UpdateRemoteTokenPoolScriptJson));
export const UpgradeTokenBridgeContract = new ExecutableScript<{
  tokenBridge: HexString;
  vaa: HexString;
}>(Script.fromJson(UpgradeTokenBridgeContractScriptJson));
