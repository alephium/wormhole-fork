/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as UnexecutedSequenceContractJson } from "../sequence/UnexecutedSequence.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace UnexecutedSequenceTypes {
  export type Fields = {
    parentId: HexString;
    begin: bigint;
    sequences: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  UnexecutedSequenceInstance,
  UnexecutedSequenceTypes.Fields
> {
  consts = {
    ErrorCodes: {
      InvalidEmitChainId: BigInt(0),
      InvalidEmitAddress: BigInt(1),
      InvalidMessageSize: BigInt(2),
      InvalidSequence: BigInt(3),
      InvalidModule: BigInt(4),
      InvalidActionId: BigInt(5),
      InvalidVersion: BigInt(6),
      InvalidGuardianSetIndex: BigInt(7),
      InvalidGuardianSetSize: BigInt(8),
      InvalidSignatureSize: BigInt(9),
      InvalidSignatureGuardianIndex: BigInt(10),
      InvalidSignature: BigInt(11),
      GuardianSetExpired: BigInt(12),
      InvalidTargetChainId: BigInt(13),
      ContractStateMismatch: BigInt(14),
      InvalidRegisterChainMessage: BigInt(15),
      InvalidTokenId: BigInt(16),
      InvalidNonceSize: BigInt(17),
      TokenNotExist: BigInt(18),
      InvalidTransferTargetChain: BigInt(19),
      InvalidDestroyUnexecutedSequenceMessage: BigInt(20),
      InvalidCaller: BigInt(21),
      ArbiterFeeLessThanAmount: BigInt(22),
      InvalidAttestTokenMessage: BigInt(23),
      InvalidPayloadId: BigInt(24),
      InvalidTransferMessage: BigInt(25),
      ExpectRemoteToken: BigInt(26),
      InvalidConsistencyLevel: BigInt(27),
      InvalidUpdateRefundAddressMessage: BigInt(28),
      TransferAmountLessThanMessageFee: BigInt(29),
      InvalidAttestTokenArg: BigInt(30),
      InvalidAttestTokenHandler: BigInt(31),
      NotSupported: BigInt(32),
    },
  };

  at(address: string): UnexecutedSequenceInstance {
    return new UnexecutedSequenceInstance(address);
  }

  tests = {
    checkSequence: async (
      params: TestContractParams<
        UnexecutedSequenceTypes.Fields,
        { seq: bigint; refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "checkSequence", params);
    },
    destroy: async (
      params: TestContractParams<
        UnexecutedSequenceTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const UnexecutedSequence = new Factory(
  Contract.fromJson(
    UnexecutedSequenceContractJson,
    "",
    "69f7a18c525aa6707771af5733f39e89bde6ee39ddcc8001c98fd1220c5191c9"
  )
);

// Use this class to interact with the blockchain
export class UnexecutedSequenceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<UnexecutedSequenceTypes.State> {
    return fetchContractState(UnexecutedSequence, this);
  }
}
