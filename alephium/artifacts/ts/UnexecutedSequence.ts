/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as UnexecutedSequenceContractJson } from "../sequence/UnexecutedSequence.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace UnexecutedSequenceTypes {
  export type Fields = {
    parentId: HexString;
    begin: bigint;
    sequences: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    checkSequence: {
      params: CallContractParams<{ seq: bigint; refundAddress: Address }>;
      result: CallContractResult<null>;
    };
    destroy: {
      params: CallContractParams<{ refundAddress: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    checkSequence: {
      params: SignExecuteContractMethodParams<{
        seq: bigint;
        refundAddress: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroy: {
      params: SignExecuteContractMethodParams<{ refundAddress: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  UnexecutedSequenceInstance,
  UnexecutedSequenceTypes.Fields
> {
  encodeFields(fields: UnexecutedSequenceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as UnexecutedSequenceTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      InvalidEmitChainId: BigInt(0),
      InvalidEmitAddress: BigInt(1),
      InvalidMessageSize: BigInt(2),
      InvalidSequence: BigInt(3),
      InvalidModule: BigInt(4),
      InvalidActionId: BigInt(5),
      InvalidVersion: BigInt(6),
      InvalidGuardianSetIndex: BigInt(7),
      InvalidGuardianSetSize: BigInt(8),
      InvalidSignatureSize: BigInt(9),
      InvalidSignatureGuardianIndex: BigInt(10),
      InvalidSignature: BigInt(11),
      GuardianSetExpired: BigInt(12),
      InvalidTargetChainId: BigInt(13),
      ContractStateMismatch: BigInt(14),
      InvalidRegisterChainMessage: BigInt(15),
      InvalidTokenId: BigInt(16),
      InvalidNonceSize: BigInt(17),
      TokenNotExist: BigInt(18),
      InvalidTransferTargetChain: BigInt(19),
      InvalidDestroyUnexecutedSequenceMessage: BigInt(20),
      InvalidCaller: BigInt(21),
      ArbiterFeeLessThanAmount: BigInt(22),
      InvalidAttestTokenMessage: BigInt(23),
      InvalidPayloadId: BigInt(24),
      InvalidTransferMessage: BigInt(25),
      ExpectRemoteToken: BigInt(26),
      InvalidConsistencyLevel: BigInt(27),
      InvalidUpdateRefundAddressMessage: BigInt(28),
      TransferAmountLessThanMessageFee: BigInt(29),
      InvalidAttestTokenArg: BigInt(30),
      InvalidAttestTokenHandler: BigInt(31),
      NotSupported: BigInt(32),
    },
  };

  at(address: string): UnexecutedSequenceInstance {
    return new UnexecutedSequenceInstance(address);
  }

  tests = {
    checkSequence: async (
      params: TestContractParamsWithoutMaps<
        UnexecutedSequenceTypes.Fields,
        { seq: bigint; refundAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "checkSequence", params, getContractByCodeHash);
    },
    destroy: async (
      params: TestContractParamsWithoutMaps<
        UnexecutedSequenceTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const UnexecutedSequence = new Factory(
  Contract.fromJson(
    UnexecutedSequenceContractJson,
    "",
    "69f7a18c525aa6707771af5733f39e89bde6ee39ddcc8001c98fd1220c5191c9",
    []
  )
);

// Use this class to interact with the blockchain
export class UnexecutedSequenceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<UnexecutedSequenceTypes.State> {
    return fetchContractState(UnexecutedSequence, this);
  }

  methods = {
    checkSequence: async (
      params: UnexecutedSequenceTypes.CallMethodParams<"checkSequence">
    ): Promise<UnexecutedSequenceTypes.CallMethodResult<"checkSequence">> => {
      return callMethod(
        UnexecutedSequence,
        this,
        "checkSequence",
        params,
        getContractByCodeHash
      );
    },
    destroy: async (
      params: UnexecutedSequenceTypes.CallMethodParams<"destroy">
    ): Promise<UnexecutedSequenceTypes.CallMethodResult<"destroy">> => {
      return callMethod(
        UnexecutedSequence,
        this,
        "destroy",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    checkSequence: async (
      params: UnexecutedSequenceTypes.SignExecuteMethodParams<"checkSequence">
    ): Promise<
      UnexecutedSequenceTypes.SignExecuteMethodResult<"checkSequence">
    > => {
      return signExecuteMethod(
        UnexecutedSequence,
        this,
        "checkSequence",
        params
      );
    },
    destroy: async (
      params: UnexecutedSequenceTypes.SignExecuteMethodParams<"destroy">
    ): Promise<UnexecutedSequenceTypes.SignExecuteMethodResult<"destroy">> => {
      return signExecuteMethod(UnexecutedSequence, this, "destroy", params);
    },
  };
}
