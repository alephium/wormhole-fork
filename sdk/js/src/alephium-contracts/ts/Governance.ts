/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as GovernanceContractJson } from "../governance.ral.json";

// Custom types for the contract
export namespace GovernanceTypes {
  export type Fields = {
    chainId: bigint;
    governanceChainId: bigint;
    governanceEmitterAddress: HexString;
    receivedSequence: bigint;
    messageFee: bigint;
    guardianSets: [HexString, HexString];
    guardianSetIndexes: [bigint, bigint];
    previousGuardianSetExpirationTimeMS: bigint;
  };

  export type State = ContractState<Fields>;

  export type WormholeMessageEvent = ContractEvent<{
    sender: HexString;
    targetChainId: bigint;
    sequence: bigint;
    nonce: HexString;
    payload: HexString;
    consistencyLevel: bigint;
  }>;

  export interface CallMethodTable {
    getMessageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    parseAndVerifyVAA: {
      params: CallContractParams<{ data: HexString; isGovernanceVAA: boolean }>;
      result: CallContractResult<
        [bigint, bigint, HexString, bigint, HexString]
      >;
    };
    parseAndVerifyGovernanceVAAGeneric: {
      params: CallContractParams<{
        vaa: HexString;
        targetSequence: bigint;
        coreModule: bigint;
        action: HexString;
      }>;
      result: CallContractResult<[bigint, bigint, HexString]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  GovernanceInstance,
  GovernanceTypes.Fields
> {
  at(address: string): GovernanceInstance {
    return new GovernanceInstance(address);
  }

  tests = {
    parseConractUpgrade: async (
      params: TestContractParams<GovernanceTypes.Fields, { payload: HexString }>
    ): Promise<
      TestContractResult<[HexString, HexString, HexString, HexString]>
    > => {
      return testMethod(this, "parseConractUpgrade", params);
    },
    getMessageFee: async (
      params: Omit<
        TestContractParams<GovernanceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getMessageFee", params);
    },
    publishWormholeMessage: async (
      params: TestContractParams<
        GovernanceTypes.Fields,
        {
          payer: Address;
          targetChainId: bigint;
          sequence: bigint;
          nonce: HexString;
          payload: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "publishWormholeMessage", params);
    },
    parseAndVerifyVAA: async (
      params: TestContractParams<
        GovernanceTypes.Fields,
        { data: HexString; isGovernanceVAA: boolean }
      >
    ): Promise<
      TestContractResult<[bigint, bigint, HexString, bigint, HexString]>
    > => {
      return testMethod(this, "parseAndVerifyVAA", params);
    },
    parseAndVerifyGovernanceVAAGeneric: async (
      params: TestContractParams<
        GovernanceTypes.Fields,
        {
          vaa: HexString;
          targetSequence: bigint;
          coreModule: bigint;
          action: HexString;
        }
      >
    ): Promise<TestContractResult<[bigint, bigint, HexString]>> => {
      return testMethod(this, "parseAndVerifyGovernanceVAAGeneric", params);
    },
    parseAndVerifyGovernanceVAA: async (
      params: TestContractParams<
        GovernanceTypes.Fields,
        { vaa: HexString; action: HexString }
      >
    ): Promise<TestContractResult<[bigint, HexString]>> => {
      return testMethod(this, "parseAndVerifyGovernanceVAA", params);
    },
    getGuardiansInfo: async (
      params: TestContractParams<
        GovernanceTypes.Fields,
        { guardianSetIndex: bigint }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getGuardiansInfo", params);
    },
    submitContractUpgrade: async (
      params: TestContractParams<GovernanceTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "submitContractUpgrade", params);
    },
    updatePreviousGuardianSet: async (
      params: Omit<
        TestContractParams<GovernanceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updatePreviousGuardianSet", params);
    },
    submitNewGuardianSet: async (
      params: TestContractParams<GovernanceTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "submitNewGuardianSet", params);
    },
    submitSetMessageFee: async (
      params: TestContractParams<GovernanceTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "submitSetMessageFee", params);
    },
    submitTransferFees: async (
      params: TestContractParams<GovernanceTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "submitTransferFees", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Governance = new Factory(
  Contract.fromJson(
    GovernanceContractJson,
    "",
    "59e000edbf5739884298899e54a4d2e34c6ebf30ac8273b7b1b00740248cf4cb"
  )
);

// Use this class to interact with the blockchain
export class GovernanceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<GovernanceTypes.State> {
    return fetchContractState(Governance, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWormholeMessageEvent(
    options: SubscribeOptions<GovernanceTypes.WormholeMessageEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Governance.contract,
      this,
      options,
      "WormholeMessage",
      fromCount
    );
  }

  methods = {
    getMessageFee: async (
      params?: GovernanceTypes.CallMethodParams<"getMessageFee">
    ): Promise<GovernanceTypes.CallMethodResult<"getMessageFee">> => {
      return callMethod(
        Governance,
        this,
        "getMessageFee",
        params === undefined ? {} : params
      );
    },
    parseAndVerifyVAA: async (
      params: GovernanceTypes.CallMethodParams<"parseAndVerifyVAA">
    ): Promise<GovernanceTypes.CallMethodResult<"parseAndVerifyVAA">> => {
      return callMethod(Governance, this, "parseAndVerifyVAA", params);
    },
    parseAndVerifyGovernanceVAAGeneric: async (
      params: GovernanceTypes.CallMethodParams<"parseAndVerifyGovernanceVAAGeneric">
    ): Promise<
      GovernanceTypes.CallMethodResult<"parseAndVerifyGovernanceVAAGeneric">
    > => {
      return callMethod(
        Governance,
        this,
        "parseAndVerifyGovernanceVAAGeneric",
        params
      );
    },
  };

  async multicall<Calls extends GovernanceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<GovernanceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Governance,
      this,
      calls
    )) as GovernanceTypes.MultiCallResults<Calls>;
  }
}
