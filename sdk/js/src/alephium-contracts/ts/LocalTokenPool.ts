/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LocalTokenPoolContractJson } from "../token_bridge/LocalTokenPool.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace LocalTokenPoolTypes {
  export type Fields = {
    tokenBridge: HexString;
    tokenChainId: bigint;
    bridgeTokenId: HexString;
    totalBridged: bigint;
    decimals_: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    completeTransfer: {
      params: CallContractParams<{
        emitterChainId: bigint;
        amount: bigint;
        vaaTokenId: HexString;
        vaaTokenChainId: bigint;
        recipient: Address;
        normalizedArbiterFee: bigint;
        caller: Address;
      }>;
      result: CallContractResult<null>;
    };
    prepareTransfer: {
      params: CallContractParams<{
        callerContractId: HexString;
        toAddress: HexString;
        amount: bigint;
        arbiterFee: bigint;
        nonce: HexString;
      }>;
      result: CallContractResult<[HexString, bigint]>;
    };
    prepareCompleteTransfer: {
      params: CallContractParams<{
        callerContractId: HexString;
        emitterChainId: bigint;
        amount: bigint;
        vaaTokenId: HexString;
        vaaTokenChainId: bigint;
        normalizedArbiterFee: bigint;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    normalizeAmount: {
      params: CallContractParams<{ amount: bigint; decimals: bigint }>;
      result: CallContractResult<bigint>;
    };
    deNormalizeAmount: {
      params: CallContractParams<{ amount: bigint; decimals: bigint }>;
      result: CallContractResult<bigint>;
    };
    transfer: {
      params: CallContractParams<{
        fromAddress: Address;
        toAddress: HexString;
        amount: bigint;
        arbiterFee: bigint;
        nonce: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDecimals: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    completeTransfer: {
      params: SignExecuteContractMethodParams<{
        emitterChainId: bigint;
        amount: bigint;
        vaaTokenId: HexString;
        vaaTokenChainId: bigint;
        recipient: Address;
        normalizedArbiterFee: bigint;
        caller: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    prepareTransfer: {
      params: SignExecuteContractMethodParams<{
        callerContractId: HexString;
        toAddress: HexString;
        amount: bigint;
        arbiterFee: bigint;
        nonce: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    prepareCompleteTransfer: {
      params: SignExecuteContractMethodParams<{
        callerContractId: HexString;
        emitterChainId: bigint;
        amount: bigint;
        vaaTokenId: HexString;
        vaaTokenChainId: bigint;
        normalizedArbiterFee: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    normalizeAmount: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        decimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    deNormalizeAmount: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        decimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    transfer: {
      params: SignExecuteContractMethodParams<{
        fromAddress: Address;
        toAddress: HexString;
        amount: bigint;
        arbiterFee: bigint;
        nonce: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LocalTokenPoolInstance,
  LocalTokenPoolTypes.Fields
> {
  encodeFields(fields: LocalTokenPoolTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt("0"),
      InvalidEmitAddress: BigInt("1"),
      InvalidMessageSize: BigInt("2"),
      InvalidSequence: BigInt("3"),
      InvalidModule: BigInt("4"),
      InvalidActionId: BigInt("5"),
      InvalidVersion: BigInt("6"),
      InvalidGuardianSetIndex: BigInt("7"),
      InvalidGuardianSetSize: BigInt("8"),
      InvalidSignatureSize: BigInt("9"),
      InvalidSignatureGuardianIndex: BigInt("10"),
      InvalidSignature: BigInt("11"),
      GuardianSetExpired: BigInt("12"),
      InvalidTargetChainId: BigInt("13"),
      ContractStateMismatch: BigInt("14"),
      InvalidRegisterChainMessage: BigInt("15"),
      InvalidTokenId: BigInt("16"),
      InvalidNonceSize: BigInt("17"),
      TokenNotExist: BigInt("18"),
      InvalidTransferTargetChain: BigInt("19"),
      InvalidDestroyUnexecutedSequenceMessage: BigInt("20"),
      InvalidCaller: BigInt("21"),
      ArbiterFeeLessThanAmount: BigInt("22"),
      InvalidAttestTokenMessage: BigInt("23"),
      InvalidPayloadId: BigInt("24"),
      InvalidTransferMessage: BigInt("25"),
      ExpectRemoteToken: BigInt("26"),
      InvalidConsistencyLevel: BigInt("27"),
      InvalidUpdateRefundAddressMessage: BigInt("28"),
      TransferAmountLessThanMessageFee: BigInt("29"),
      InvalidAttestTokenArg: BigInt("30"),
      InvalidAttestTokenHandler: BigInt("31"),
      NotSupported: BigInt("32"),
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): LocalTokenPoolInstance {
    return new LocalTokenPoolInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParamsWithoutMaps<LocalTokenPoolTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<LocalTokenPoolTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDecimals: async (
      params: Omit<
        TestContractParamsWithoutMaps<LocalTokenPoolTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getDecimals", params, getContractByCodeHash);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParamsWithoutMaps<LocalTokenPoolTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getTotalSupply", params, getContractByCodeHash);
    },
    completeTransfer: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        {
          emitterChainId: bigint;
          amount: bigint;
          vaaTokenId: HexString;
          vaaTokenChainId: bigint;
          recipient: Address;
          normalizedArbiterFee: bigint;
          caller: Address;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    prepareTransfer: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        {
          callerContractId: HexString;
          toAddress: HexString;
          amount: bigint;
          arbiterFee: bigint;
          nonce: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(this, "prepareTransfer", params, getContractByCodeHash);
    },
    prepareCompleteTransfer: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        {
          callerContractId: HexString;
          emitterChainId: bigint;
          amount: bigint;
          vaaTokenId: HexString;
          vaaTokenChainId: bigint;
          normalizedArbiterFee: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(
        this,
        "prepareCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    normalizeAmount: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        { amount: bigint; decimals: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "normalizeAmount", params, getContractByCodeHash);
    },
    deNormalizeAmount: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        { amount: bigint; decimals: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "deNormalizeAmount",
        params,
        getContractByCodeHash
      );
    },
    transfer: async (
      params: TestContractParamsWithoutMaps<
        LocalTokenPoolTypes.Fields,
        {
          fromAddress: Address;
          toAddress: HexString;
          amount: bigint;
          arbiterFee: bigint;
          nonce: HexString;
        }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "transfer", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: LocalTokenPoolTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const LocalTokenPool = new Factory(
  Contract.fromJson(
    LocalTokenPoolContractJson,
    "",
    "6330d3736eef41d3bc9c5026d0608def44267cc00ed8d8be0620d01f4627f035",
    []
  )
);

// Use this class to interact with the blockchain
export class LocalTokenPoolInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LocalTokenPoolTypes.State> {
    return fetchContractState(LocalTokenPool, this);
  }

  view = {
    getSymbol: async (
      params?: LocalTokenPoolTypes.CallMethodParams<"getSymbol">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: LocalTokenPoolTypes.CallMethodParams<"getName">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"getName">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: LocalTokenPoolTypes.CallMethodParams<"getDecimals">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: LocalTokenPoolTypes.CallMethodParams<"getTotalSupply">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    completeTransfer: async (
      params: LocalTokenPoolTypes.CallMethodParams<"completeTransfer">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"completeTransfer">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    prepareTransfer: async (
      params: LocalTokenPoolTypes.CallMethodParams<"prepareTransfer">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"prepareTransfer">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "prepareTransfer",
        params,
        getContractByCodeHash
      );
    },
    prepareCompleteTransfer: async (
      params: LocalTokenPoolTypes.CallMethodParams<"prepareCompleteTransfer">
    ): Promise<
      LocalTokenPoolTypes.CallMethodResult<"prepareCompleteTransfer">
    > => {
      return callMethod(
        LocalTokenPool,
        this,
        "prepareCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    normalizeAmount: async (
      params: LocalTokenPoolTypes.CallMethodParams<"normalizeAmount">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"normalizeAmount">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "normalizeAmount",
        params,
        getContractByCodeHash
      );
    },
    deNormalizeAmount: async (
      params: LocalTokenPoolTypes.CallMethodParams<"deNormalizeAmount">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"deNormalizeAmount">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "deNormalizeAmount",
        params,
        getContractByCodeHash
      );
    },
    transfer: async (
      params: LocalTokenPoolTypes.CallMethodParams<"transfer">
    ): Promise<LocalTokenPoolTypes.CallMethodResult<"transfer">> => {
      return callMethod(
        LocalTokenPool,
        this,
        "transfer",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getSymbol: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<LocalTokenPoolTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(LocalTokenPool, this, "getSymbol", params);
    },
    getName: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"getName">
    ): Promise<LocalTokenPoolTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(LocalTokenPool, this, "getName", params);
    },
    getDecimals: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"getDecimals">
    ): Promise<LocalTokenPoolTypes.SignExecuteMethodResult<"getDecimals">> => {
      return signExecuteMethod(LocalTokenPool, this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"getTotalSupply">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"getTotalSupply">
    > => {
      return signExecuteMethod(LocalTokenPool, this, "getTotalSupply", params);
    },
    completeTransfer: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"completeTransfer">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"completeTransfer">
    > => {
      return signExecuteMethod(
        LocalTokenPool,
        this,
        "completeTransfer",
        params
      );
    },
    prepareTransfer: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"prepareTransfer">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"prepareTransfer">
    > => {
      return signExecuteMethod(LocalTokenPool, this, "prepareTransfer", params);
    },
    prepareCompleteTransfer: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"prepareCompleteTransfer">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"prepareCompleteTransfer">
    > => {
      return signExecuteMethod(
        LocalTokenPool,
        this,
        "prepareCompleteTransfer",
        params
      );
    },
    normalizeAmount: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"normalizeAmount">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"normalizeAmount">
    > => {
      return signExecuteMethod(LocalTokenPool, this, "normalizeAmount", params);
    },
    deNormalizeAmount: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"deNormalizeAmount">
    ): Promise<
      LocalTokenPoolTypes.SignExecuteMethodResult<"deNormalizeAmount">
    > => {
      return signExecuteMethod(
        LocalTokenPool,
        this,
        "deNormalizeAmount",
        params
      );
    },
    transfer: async (
      params: LocalTokenPoolTypes.SignExecuteMethodParams<"transfer">
    ): Promise<LocalTokenPoolTypes.SignExecuteMethodResult<"transfer">> => {
      return signExecuteMethod(LocalTokenPool, this, "transfer", params);
    },
  };

  async multicall<Calls extends LocalTokenPoolTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LocalTokenPoolTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends LocalTokenPoolTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<LocalTokenPoolTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | LocalTokenPoolTypes.MultiCallParams
      | LocalTokenPoolTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      LocalTokenPool,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
