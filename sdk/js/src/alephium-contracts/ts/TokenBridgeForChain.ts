/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenBridgeForChainContractJson } from "../token_bridge/token_bridge_for_chain.ral.json";

// Custom types for the contract
export namespace TokenBridgeForChainTypes {
  export type Fields = {
    governance: HexString;
    localChainId: bigint;
    localTokenBridgeId: HexString;
    remoteChainId: bigint;
    remoteTokenBridgeId: HexString;
    start: bigint;
    firstNext256: bigint;
    secondNext256: bigint;
    unexecutedSequenceTemplateId: HexString;
    sendSequence: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    nextSendSequence: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TokenBridgeForChainInstance,
  TokenBridgeForChainTypes.Fields
> {
  at(address: string): TokenBridgeForChainInstance {
    return new TokenBridgeForChainInstance(address);
  }

  async testSetExecutedMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { offset: bigint; current: bigint }
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "setExecuted", params);
  }

  async testCompactMethod(
    params: Omit<
      TestContractParams<TokenBridgeForChainTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "compact", params);
  }

  async testCheckSequenceInSubContractMethod(
    params: TestContractParams<TokenBridgeForChainTypes.Fields, { seq: bigint }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "checkSequenceInSubContract", params);
  }

  async testCheckSequenceMethod(
    params: TestContractParams<TokenBridgeForChainTypes.Fields, { seq: bigint }>
  ): Promise<TestContractResult<boolean>> {
    return testMethod(this, "checkSequence", params);
  }

  async testNextSendSequenceMethod(
    params: Omit<
      TestContractParams<TokenBridgeForChainTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "nextSendSequence", params);
  }

  async testCheckCompleteTransferMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { vaa: HexString }
    >
  ): Promise<TestContractResult<[boolean, HexString]>> {
    return testMethod(this, "checkCompleteTransfer", params);
  }

  async testParseCompleteTransferMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { payload: HexString }
    >
  ): Promise<
    TestContractResult<[bigint, HexString, bigint, HexString, bigint]>
  > {
    return testMethod(this, "parseCompleteTransfer", params);
  }

  async testCompleteTransferMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { vaa: HexString; caller: HexString }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "completeTransfer", params);
  }

  async testDestroyUnexecutedSequenceContractsMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { paths: HexString }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "destroyUnexecutedSequenceContracts", params);
  }

  async testDepositMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { from: HexString; alphAmount: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "deposit", params);
  }

  async testWithdrawMethod(
    params: TestContractParams<
      TokenBridgeForChainTypes.Fields,
      { alphAmount: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "withdraw", params);
  }
}

// Use this object to test and deploy the contract
export const TokenBridgeForChain = new Factory(
  Contract.fromJson(
    TokenBridgeForChainContractJson,
    "",
    "7f56785c067d8912f1329df035129f78a6561be79db0d8d953e361b002155ef5"
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeForChainInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeForChainTypes.State> {
    return fetchContractState(TokenBridgeForChain, this);
  }

  async callNextSendSequenceMethod(
    params?: TokenBridgeForChainTypes.CallMethodParams<"nextSendSequence">
  ): Promise<TokenBridgeForChainTypes.CallMethodResult<"nextSendSequence">> {
    return callMethod(
      TokenBridgeForChain,
      this,
      "nextSendSequence",
      params === undefined ? {} : params
    );
  }

  async multicall<Calls extends TokenBridgeForChainTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenBridgeForChainTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenBridgeForChain,
      this,
      calls
    )) as TokenBridgeForChainTypes.MultiCallResults<Calls>;
  }
}
