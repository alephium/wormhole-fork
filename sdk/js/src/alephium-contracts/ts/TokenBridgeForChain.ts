/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenBridgeForChainContractJson } from "../token_bridge/TokenBridgeForChain.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenBridgeForChainTypes {
  export type Fields = {
    governance: HexString;
    localChainId: bigint;
    localTokenBridge: HexString;
    remoteChainId: bigint;
    remoteTokenBridgeId: HexString;
    start: bigint;
    firstNext256: bigint;
    secondNext256: bigint;
    unexecutedSequenceTemplateId: HexString;
    sendSequence: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    setExecuted: {
      params: CallContractParams<{ offset: bigint; current: bigint }>;
      result: CallContractResult<bigint>;
    };
    compact: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    checkSequenceInSubContract: {
      params: CallContractParams<{ seq: bigint }>;
      result: CallContractResult<null>;
    };
    checkSequence: {
      params: CallContractParams<{ seq: bigint }>;
      result: CallContractResult<boolean>;
    };
    nextSendSequence: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    checkCompleteTransfer: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<[boolean, HexString]>;
    };
    parseCompleteTransfer: {
      params: CallContractParams<{ payload: HexString }>;
      result: CallContractResult<[bigint, HexString, bigint, Address, bigint]>;
    };
    completeTransfer: {
      params: CallContractParams<{ vaa: HexString; caller: Address }>;
      result: CallContractResult<null>;
    };
    destroyUnexecutedSequenceContracts: {
      params: CallContractParams<{ paths: HexString }>;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ from: Address; alphAmount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ alphAmount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    setExecuted: {
      params: SignExecuteContractMethodParams<{
        offset: bigint;
        current: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    compact: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    checkSequenceInSubContract: {
      params: SignExecuteContractMethodParams<{ seq: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    checkSequence: {
      params: SignExecuteContractMethodParams<{ seq: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    nextSendSequence: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    checkCompleteTransfer: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    parseCompleteTransfer: {
      params: SignExecuteContractMethodParams<{ payload: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    completeTransfer: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        caller: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    destroyUnexecutedSequenceContracts: {
      params: SignExecuteContractMethodParams<{ paths: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{
        from: Address;
        alphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{ alphAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenBridgeForChainInstance,
  TokenBridgeForChainTypes.Fields
> {
  encodeFields(fields: TokenBridgeForChainTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt("0"),
      InvalidEmitAddress: BigInt("1"),
      InvalidMessageSize: BigInt("2"),
      InvalidSequence: BigInt("3"),
      InvalidModule: BigInt("4"),
      InvalidActionId: BigInt("5"),
      InvalidVersion: BigInt("6"),
      InvalidGuardianSetIndex: BigInt("7"),
      InvalidGuardianSetSize: BigInt("8"),
      InvalidSignatureSize: BigInt("9"),
      InvalidSignatureGuardianIndex: BigInt("10"),
      InvalidSignature: BigInt("11"),
      GuardianSetExpired: BigInt("12"),
      InvalidTargetChainId: BigInt("13"),
      ContractStateMismatch: BigInt("14"),
      InvalidRegisterChainMessage: BigInt("15"),
      InvalidTokenId: BigInt("16"),
      InvalidNonceSize: BigInt("17"),
      TokenNotExist: BigInt("18"),
      InvalidTransferTargetChain: BigInt("19"),
      InvalidDestroyUnexecutedSequenceMessage: BigInt("20"),
      InvalidCaller: BigInt("21"),
      ArbiterFeeLessThanAmount: BigInt("22"),
      InvalidAttestTokenMessage: BigInt("23"),
      InvalidPayloadId: BigInt("24"),
      InvalidTransferMessage: BigInt("25"),
      ExpectRemoteToken: BigInt("26"),
      InvalidConsistencyLevel: BigInt("27"),
      InvalidUpdateRefundAddressMessage: BigInt("28"),
      TransferAmountLessThanMessageFee: BigInt("29"),
      InvalidAttestTokenArg: BigInt("30"),
      InvalidAttestTokenHandler: BigInt("31"),
      NotSupported: BigInt("32"),
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): TokenBridgeForChainInstance {
    return new TokenBridgeForChainInstance(address);
  }

  tests = {
    setExecuted: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { offset: bigint; current: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "setExecuted", params, getContractByCodeHash);
    },
    compact: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeForChainTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "compact", params, getContractByCodeHash);
    },
    checkSequenceInSubContract: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { seq: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "checkSequenceInSubContract",
        params,
        getContractByCodeHash
      );
    },
    checkSequence: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { seq: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "checkSequence", params, getContractByCodeHash);
    },
    nextSendSequence: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeForChainTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "nextSendSequence",
        params,
        getContractByCodeHash
      );
    },
    checkCompleteTransfer: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<[boolean, HexString]>> => {
      return testMethod(
        this,
        "checkCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    parseCompleteTransfer: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { payload: HexString }
      >
    ): Promise<
      TestContractResultWithoutMaps<
        [bigint, HexString, bigint, Address, bigint]
      >
    > => {
      return testMethod(
        this,
        "parseCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    completeTransfer: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { vaa: HexString; caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    destroyUnexecutedSequenceContracts: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { paths: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "destroyUnexecutedSequenceContracts",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { from: Address; alphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeForChainTypes.Fields,
        { alphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenBridgeForChainTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TokenBridgeForChain = new Factory(
  Contract.fromJson(
    TokenBridgeForChainContractJson,
    "",
    "58443a1005d6791f07d0701f4ef91ec367777ab67be27990a6b8fcb7c84e7240",
    []
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeForChainInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeForChainTypes.State> {
    return fetchContractState(TokenBridgeForChain, this);
  }

  view = {
    setExecuted: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"setExecuted">
    ): Promise<TokenBridgeForChainTypes.CallMethodResult<"setExecuted">> => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "setExecuted",
        params,
        getContractByCodeHash
      );
    },
    compact: async (
      params?: TokenBridgeForChainTypes.CallMethodParams<"compact">
    ): Promise<TokenBridgeForChainTypes.CallMethodResult<"compact">> => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "compact",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    checkSequenceInSubContract: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"checkSequenceInSubContract">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"checkSequenceInSubContract">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "checkSequenceInSubContract",
        params,
        getContractByCodeHash
      );
    },
    checkSequence: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"checkSequence">
    ): Promise<TokenBridgeForChainTypes.CallMethodResult<"checkSequence">> => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "checkSequence",
        params,
        getContractByCodeHash
      );
    },
    nextSendSequence: async (
      params?: TokenBridgeForChainTypes.CallMethodParams<"nextSendSequence">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"nextSendSequence">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "nextSendSequence",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    checkCompleteTransfer: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"checkCompleteTransfer">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"checkCompleteTransfer">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "checkCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    parseCompleteTransfer: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"parseCompleteTransfer">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"parseCompleteTransfer">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "parseCompleteTransfer",
        params,
        getContractByCodeHash
      );
    },
    completeTransfer: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"completeTransfer">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"completeTransfer">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "completeTransfer",
        params,
        getContractByCodeHash
      );
    },
    destroyUnexecutedSequenceContracts: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"destroyUnexecutedSequenceContracts">
    ): Promise<
      TokenBridgeForChainTypes.CallMethodResult<"destroyUnexecutedSequenceContracts">
    > => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "destroyUnexecutedSequenceContracts",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"deposit">
    ): Promise<TokenBridgeForChainTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: TokenBridgeForChainTypes.CallMethodParams<"withdraw">
    ): Promise<TokenBridgeForChainTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        TokenBridgeForChain,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    setExecuted: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"setExecuted">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"setExecuted">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "setExecuted",
        params
      );
    },
    compact: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"compact">
    ): Promise<TokenBridgeForChainTypes.SignExecuteMethodResult<"compact">> => {
      return signExecuteMethod(TokenBridgeForChain, this, "compact", params);
    },
    checkSequenceInSubContract: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"checkSequenceInSubContract">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"checkSequenceInSubContract">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "checkSequenceInSubContract",
        params
      );
    },
    checkSequence: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"checkSequence">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"checkSequence">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "checkSequence",
        params
      );
    },
    nextSendSequence: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"nextSendSequence">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"nextSendSequence">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "nextSendSequence",
        params
      );
    },
    checkCompleteTransfer: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"checkCompleteTransfer">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"checkCompleteTransfer">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "checkCompleteTransfer",
        params
      );
    },
    parseCompleteTransfer: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"parseCompleteTransfer">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"parseCompleteTransfer">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "parseCompleteTransfer",
        params
      );
    },
    completeTransfer: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"completeTransfer">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"completeTransfer">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "completeTransfer",
        params
      );
    },
    destroyUnexecutedSequenceContracts: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"destroyUnexecutedSequenceContracts">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"destroyUnexecutedSequenceContracts">
    > => {
      return signExecuteMethod(
        TokenBridgeForChain,
        this,
        "destroyUnexecutedSequenceContracts",
        params
      );
    },
    deposit: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"deposit">
    ): Promise<TokenBridgeForChainTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(TokenBridgeForChain, this, "deposit", params);
    },
    withdraw: async (
      params: TokenBridgeForChainTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<
      TokenBridgeForChainTypes.SignExecuteMethodResult<"withdraw">
    > => {
      return signExecuteMethod(TokenBridgeForChain, this, "withdraw", params);
    },
  };

  async multicall<Calls extends TokenBridgeForChainTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenBridgeForChainTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TokenBridgeForChainTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TokenBridgeForChainTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TokenBridgeForChainTypes.MultiCallParams
      | TokenBridgeForChainTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TokenBridgeForChain,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
