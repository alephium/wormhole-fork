/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenBridgeV1ContractJson } from "../tests/TokenBridgeV1.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenBridgeV1Types {
  export type Fields = {
    governanceContractId: HexString;
    localChainId: bigint;
    receivedSequence: bigint;
    sendSequence: bigint;
    tokenBridgeFactory: HexString;
    minimalConsistencyLevel: bigint;
    refundAddress: Address;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  TokenBridgeV1Instance,
  TokenBridgeV1Types.Fields
> {
  at(address: string): TokenBridgeV1Instance {
    return new TokenBridgeV1Instance(address);
  }

  tests = {
    foo: async (
      params: Omit<
        TestContractParams<TokenBridgeV1Types.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "foo", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TokenBridgeV1 = new Factory(
  Contract.fromJson(
    TokenBridgeV1ContractJson,
    "",
    "0778af62d0feb156513decbaaa86999da11a1b7fd7aaaecc767a25155b33d15c"
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeV1Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeV1Types.State> {
    return fetchContractState(TokenBridgeV1, this);
  }
}
