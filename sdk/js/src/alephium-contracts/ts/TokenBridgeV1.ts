/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenBridgeV1ContractJson } from "../tests/TokenBridgeV1.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace TokenBridgeV1Types {
  export type Fields = {
    governanceContractId: HexString;
    localChainId: bigint;
    receivedSequence: bigint;
    sendSequence: bigint;
    tokenBridgeFactory: HexString;
    minimalConsistencyLevel: bigint;
    refundAddress: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    foo: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    foo: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenBridgeV1Instance,
  TokenBridgeV1Types.Fields
> {
  encodeFields(fields: TokenBridgeV1Types.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): TokenBridgeV1Instance {
    return new TokenBridgeV1Instance(address);
  }

  tests = {
    foo: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeV1Types.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "foo", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenBridgeV1Types.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TokenBridgeV1 = new Factory(
  Contract.fromJson(
    TokenBridgeV1ContractJson,
    "",
    "0778af62d0feb156513decbaaa86999da11a1b7fd7aaaecc767a25155b33d15c",
    []
  )
);
registerContract(TokenBridgeV1);

// Use this class to interact with the blockchain
export class TokenBridgeV1Instance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeV1Types.State> {
    return fetchContractState(TokenBridgeV1, this);
  }

  view = {
    foo: async (
      params?: TokenBridgeV1Types.CallMethodParams<"foo">
    ): Promise<TokenBridgeV1Types.CallMethodResult<"foo">> => {
      return callMethod(
        TokenBridgeV1,
        this,
        "foo",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    foo: async (
      params: TokenBridgeV1Types.SignExecuteMethodParams<"foo">
    ): Promise<TokenBridgeV1Types.SignExecuteMethodResult<"foo">> => {
      return signExecuteMethod(TokenBridgeV1, this, "foo", params);
    },
  };
}
