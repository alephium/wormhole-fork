/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as SetMessageFeeScriptJson } from "../governance_scripts/set_message_fee.ral.json";
import { default as TransferFeeScriptJson } from "../governance_scripts/transfer_fee.ral.json";
import { default as UpdateGuardianSetScriptJson } from "../governance_scripts/update_guardian_set.ral.json";
import { default as UpdateGovernanceContractScriptJson } from "../governance_scripts/upgrade_governance_contract.ral.json";
import { default as GetTokenScriptJson } from "../tests/get_token.ral.json";
import { default as AttestTokenScriptJson } from "../token_bridge_scripts/attest_token.ral.json";
import { default as CompleteTransferScriptJson } from "../token_bridge_scripts/complete_transfer.ral.json";
import { default as CreateLocalAttestTokenHandlerScriptJson } from "../token_bridge_scripts/create_local_attest_token_handler.ral.json";
import { default as CreateLocalTokenPoolScriptJson } from "../token_bridge_scripts/create_local_token_pool.ral.json";
import { default as CreateRemoteTokenPoolScriptJson } from "../token_bridge_scripts/create_remote_token_pool.ral.json";
import { default as DepositScriptJson } from "../token_bridge_scripts/deposit.ral.json";
import { default as DestroyUnexecutedSequenceContractsScriptJson } from "../token_bridge_scripts/destroy_unexecuted_sequence_contracts.ral.json";
import { default as RegisterChainScriptJson } from "../token_bridge_scripts/register_chain.ral.json";
import { default as TransferLocalScriptJson } from "../token_bridge_scripts/transfer_local.ral.json";
import { default as TransferRemoteScriptJson } from "../token_bridge_scripts/transfer_remote.ral.json";
import { default as UpdateMinimalConsistencyLevelScriptJson } from "../token_bridge_scripts/update_minimal_consistency_level.ral.json";
import { default as UpdateRefundAddressScriptJson } from "../token_bridge_scripts/update_refund_address.ral.json";
import { default as UpdateRemoteTokenPoolScriptJson } from "../token_bridge_scripts/update_remote_token_pool.ral.json";
import { default as UpgradeTokenBridgeContractScriptJson } from "../token_bridge_scripts/upgrade_token_bridge_contract.ral.json";

export namespace SetMessageFee {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ governance: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(SetMessageFeeScriptJson);
}

export namespace TransferFee {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ governance: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(TransferFeeScriptJson);
}

export namespace UpdateGuardianSet {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ governance: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(UpdateGuardianSetScriptJson);
}

export namespace UpdateGovernanceContract {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ governance: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(UpdateGovernanceContractScriptJson);
}

export namespace GetToken {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      sender: HexString;
      token: HexString;
      amount: bigint;
      factor: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(GetTokenScriptJson);
}

export namespace AttestToken {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      payer: HexString;
      tokenBridge: HexString;
      localTokenId: HexString;
      decimals: bigint;
      symbol: HexString;
      name: HexString;
      nonce: HexString;
      consistencyLevel: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(AttestTokenScriptJson);
}

export namespace CompleteTransfer {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      tokenBridgeForChain: HexString;
      vaa: HexString;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(CompleteTransferScriptJson);
}

export namespace CreateLocalAttestTokenHandler {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      tokenBridge: HexString;
      payer: HexString;
      alphAmount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(
    CreateLocalAttestTokenHandlerScriptJson
  );
}

export namespace CreateLocalTokenPool {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      payer: HexString;
      attestTokenHandler: HexString;
      localTokenId: HexString;
      vaa: HexString;
      alphAmount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(CreateLocalTokenPoolScriptJson);
}

export namespace CreateRemoteTokenPool {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      payer: HexString;
      attestTokenHandler: HexString;
      vaa: HexString;
      alphAmount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(CreateRemoteTokenPoolScriptJson);
}

export namespace Deposit {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      tokenBridgeForChain: HexString;
      payer: HexString;
      amount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(DepositScriptJson);
}

export namespace DestroyUnexecutedSequenceContracts {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ tokenBridge: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(
    DestroyUnexecutedSequenceContractsScriptJson
  );
}

export namespace RegisterChain {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      payer: HexString;
      tokenBridge: HexString;
      vaa: HexString;
      alphAmount: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(RegisterChainScriptJson);
}

export namespace TransferLocal {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      tokenBridge: HexString;
      fromAddress: HexString;
      localTokenId: HexString;
      alphChainId: bigint;
      toChainId: bigint;
      toAddress: HexString;
      tokenAmount: bigint;
      arbiterFee: bigint;
      nonce: HexString;
      consistencyLevel: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(TransferLocalScriptJson);
}

export namespace TransferRemote {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      tokenBridge: HexString;
      fromAddress: HexString;
      tokenPoolId: HexString;
      remoteTokenId: HexString;
      tokenChainId: bigint;
      toChainId: bigint;
      toAddress: HexString;
      tokenAmount: bigint;
      arbiterFee: bigint;
      nonce: HexString;
      consistencyLevel: bigint;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(TransferRemoteScriptJson);
}

export namespace UpdateMinimalConsistencyLevel {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ tokenBridge: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(
    UpdateMinimalConsistencyLevelScriptJson
  );
}

export namespace UpdateRefundAddress {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ tokenBridge: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(UpdateRefundAddressScriptJson);
}

export namespace UpdateRemoteTokenPool {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{
      attestTokenHandler: HexString;
      vaa: HexString;
    }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(UpdateRemoteTokenPoolScriptJson);
}

export namespace UpgradeTokenBridgeContract {
  export async function execute(
    signer: SignerProvider,
    params: ExecuteScriptParams<{ tokenBridge: HexString; vaa: HexString }>
  ): Promise<ExecuteScriptResult> {
    const signerParams = await script.txParamsForExecution(signer, params);
    return await signer.signAndSubmitExecuteScriptTx(signerParams);
  }

  export const script = Script.fromJson(UpgradeTokenBridgeContractScriptJson);
}
