/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as UnexecutedSequenceTestContractJson } from "../tests/UnexecutedSequenceTest.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace UnexecutedSequenceTestTypes {
  export type Fields = {
    unexecutedSequenceId: HexString;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  UnexecutedSequenceTestInstance,
  UnexecutedSequenceTestTypes.Fields
> {
  at(address: string): UnexecutedSequenceTestInstance {
    return new UnexecutedSequenceTestInstance(address);
  }

  tests = {
    checkSequence: async (
      params: TestContractParams<
        UnexecutedSequenceTestTypes.Fields,
        { seq: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "checkSequence", params);
    },
    destroy: async (
      params: Omit<
        TestContractParams<UnexecutedSequenceTestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroy", params);
    },
  };
}

// Use this object to test and deploy the contract
export const UnexecutedSequenceTest = new Factory(
  Contract.fromJson(
    UnexecutedSequenceTestContractJson,
    "",
    "959eab90ef1db13a92de0fffd3b3c7bc5b04d8b0e61bcae7ff8c0713b3d89ea7"
  )
);

// Use this class to interact with the blockchain
export class UnexecutedSequenceTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<UnexecutedSequenceTestTypes.State> {
    return fetchContractState(UnexecutedSequenceTest, this);
  }
}
