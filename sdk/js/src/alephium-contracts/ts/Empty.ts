/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as EmptyContractJson } from "../tests/Empty.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace EmptyTypes {
  export type Fields = {
    a: bigint;
    b: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<EmptyInstance, EmptyTypes.Fields> {
  at(address: string): EmptyInstance {
    return new EmptyInstance(address);
  }

  tests = {
    foo: async (
      params: Omit<TestContractParams<EmptyTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "foo", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Empty = new Factory(
  Contract.fromJson(
    EmptyContractJson,
    "",
    "6d6160ec29f40a382f2154aa04b223925d5004e9848b0ca6f74b2f5bc8762d22"
  )
);

// Use this class to interact with the blockchain
export class EmptyInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<EmptyTypes.State> {
    return fetchContractState(Empty, this);
  }
}
