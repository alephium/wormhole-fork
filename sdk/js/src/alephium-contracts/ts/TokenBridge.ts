/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenBridgeContractJson } from "../token_bridge/TokenBridge.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenBridgeTypes {
  export type Fields = {
    governance: HexString;
    localChainId: bigint;
    receivedSequence: bigint;
    sendSequence: bigint;
    tokenBridgeFactory: HexString;
    minimalConsistencyLevel: bigint;
    refundAddress: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getRefundAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getMessageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TokenBridgeInstance,
  TokenBridgeTypes.Fields
> {
  consts = {
    TokenBridgeModule: BigInt(102075932637695572646848357),
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt(0),
      InvalidEmitAddress: BigInt(1),
      InvalidMessageSize: BigInt(2),
      InvalidSequence: BigInt(3),
      InvalidModule: BigInt(4),
      InvalidActionId: BigInt(5),
      InvalidVersion: BigInt(6),
      InvalidGuardianSetIndex: BigInt(7),
      InvalidGuardianSetSize: BigInt(8),
      InvalidSignatureSize: BigInt(9),
      InvalidSignatureGuardianIndex: BigInt(10),
      InvalidSignature: BigInt(11),
      GuardianSetExpired: BigInt(12),
      InvalidTargetChainId: BigInt(13),
      ContractStateMismatch: BigInt(14),
      InvalidRegisterChainMessage: BigInt(15),
      InvalidTokenId: BigInt(16),
      InvalidNonceSize: BigInt(17),
      TokenNotExist: BigInt(18),
      InvalidTransferTargetChain: BigInt(19),
      InvalidDestroyUnexecutedSequenceMessage: BigInt(20),
      InvalidCaller: BigInt(21),
      ArbiterFeeLessThanAmount: BigInt(22),
      InvalidAttestTokenMessage: BigInt(23),
      InvalidPayloadId: BigInt(24),
      InvalidTransferMessage: BigInt(25),
      ExpectRemoteToken: BigInt(26),
      InvalidConsistencyLevel: BigInt(27),
      InvalidUpdateRefundAddressMessage: BigInt(28),
      TransferAmountLessThanMessageFee: BigInt(29),
      InvalidAttestTokenArg: BigInt(30),
      InvalidAttestTokenHandler: BigInt(31),
      NotSupported: BigInt(32),
    },
    ActionId: {
      RegisterChain: "01",
      ContractUpgrade: "02",
      DestroyUnexecutedSequences: "f0",
      UpdateMinimalConsistencyLevel: "f1",
      UpdateRefundAddress: "f2",
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): TokenBridgeInstance {
    return new TokenBridgeInstance(address);
  }

  tests = {
    parseAndVerifyGovernanceVAA: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        { vaa: HexString; action: HexString }
      >
    ): Promise<TestContractResult<[bigint, HexString]>> => {
      return testMethod(this, "parseAndVerifyGovernanceVAA", params);
    },
    createAttestTokenHandler: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          payer: Address;
          createContractAlphAmount: bigint;
          targetChainId: bigint;
          targetTokenBridgeId: HexString;
          isLocal: boolean;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createAttestTokenHandler", params);
    },
    createLocalAttestTokenHandler: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        { payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createLocalAttestTokenHandler", params);
    },
    parseAndVerifyRegisterChain: async (
      params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<[bigint, HexString]>> => {
      return testMethod(this, "parseAndVerifyRegisterChain", params);
    },
    registerChain: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        { vaa: HexString; payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "registerChain", params);
    },
    upgradeContract: async (
      params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "upgradeContract", params);
    },
    destroyUnexecutedSequenceContracts: async (
      params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyUnexecutedSequenceContracts", params);
    },
    updateMinimalConsistencyLevel: async (
      params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateMinimalConsistencyLevel", params);
    },
    getRefundAddress: async (
      params: Omit<
        TestContractParams<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getRefundAddress", params);
    },
    updateRefundAddress: async (
      params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateRefundAddress", params);
    },
    getMessageFee: async (
      params: Omit<
        TestContractParams<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getMessageFee", params);
    },
    attestToken: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          payer: Address;
          localTokenId: HexString;
          decimals: bigint;
          symbol: HexString;
          name: HexString;
          nonce: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "attestToken", params);
    },
    nextSendSequence: async (
      params: Omit<
        TestContractParams<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "nextSendSequence", params);
    },
    createLocalTokenPool: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          localTokenId: HexString;
          decimals: bigint;
          payer: Address;
          createContractAlphAmount: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createLocalTokenPool", params);
    },
    createRemoteTokenPool: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          decimals: bigint;
          symbol: HexString;
          name: HexString;
          msgSequence: bigint;
          payer: Address;
          createContractAlphAmount: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createRemoteTokenPool", params);
    },
    updateRemoteTokenPool: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          symbol: HexString;
          name: HexString;
          msgSequence: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateRemoteTokenPool", params);
    },
    transferToken: async (
      params: TestContractParams<
        TokenBridgeTypes.Fields,
        {
          fromAddress: Address;
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          toChainId: bigint;
          toAddress: HexString;
          tokenAmount: bigint;
          messageFee: bigint;
          arbiterFee: bigint;
          nonce: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "transferToken", params);
    },
  };
}

// Use this object to test and deploy the contract
export const TokenBridge = new Factory(
  Contract.fromJson(
    TokenBridgeContractJson,
    "",
    "3921ab78ca073b5125b2ff7e4232e72f2c1c62554bbc8f81d39e769e6bcf349c"
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeTypes.State> {
    return fetchContractState(TokenBridge, this);
  }

  methods = {
    getRefundAddress: async (
      params?: TokenBridgeTypes.CallMethodParams<"getRefundAddress">
    ): Promise<TokenBridgeTypes.CallMethodResult<"getRefundAddress">> => {
      return callMethod(
        TokenBridge,
        this,
        "getRefundAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMessageFee: async (
      params?: TokenBridgeTypes.CallMethodParams<"getMessageFee">
    ): Promise<TokenBridgeTypes.CallMethodResult<"getMessageFee">> => {
      return callMethod(
        TokenBridge,
        this,
        "getMessageFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends TokenBridgeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenBridgeTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenBridge,
      this,
      calls,
      getContractByCodeHash
    )) as TokenBridgeTypes.MultiCallResults<Calls>;
  }
}
