/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenBridgeContractJson } from "../token_bridge/TokenBridge.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace TokenBridgeTypes {
  export type Fields = {
    governance: HexString;
    localChainId: bigint;
    receivedSequence: bigint;
    sendSequence: bigint;
    tokenBridgeFactory: HexString;
    minimalConsistencyLevel: bigint;
    refundAddress: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    parseAndVerifyGovernanceVAA: {
      params: CallContractParams<{ vaa: HexString; action: HexString }>;
      result: CallContractResult<[bigint, HexString]>;
    };
    createAttestTokenHandler: {
      params: CallContractParams<{
        payer: Address;
        createContractAlphAmount: bigint;
        targetChainId: bigint;
        targetTokenBridgeId: HexString;
        isLocal: boolean;
      }>;
      result: CallContractResult<null>;
    };
    createLocalAttestTokenHandler: {
      params: CallContractParams<{
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    parseAndVerifyRegisterChain: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<[bigint, HexString]>;
    };
    registerChain: {
      params: CallContractParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    upgradeContract: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    destroyUnexecutedSequenceContracts: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    updateMinimalConsistencyLevel: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    getRefundAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    updateRefundAddress: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    getMessageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    attestToken: {
      params: CallContractParams<{
        payer: Address;
        localTokenId: HexString;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        nonce: HexString;
        consistencyLevel: bigint;
      }>;
      result: CallContractResult<null>;
    };
    nextSendSequence: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    createLocalTokenPool: {
      params: CallContractParams<{
        localTokenId: HexString;
        decimals: bigint;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    createRemoteTokenPool: {
      params: CallContractParams<{
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    updateRemoteTokenPool: {
      params: CallContractParams<{
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
      }>;
      result: CallContractResult<null>;
    };
    transferToken: {
      params: CallContractParams<{
        fromAddress: Address;
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        toChainId: bigint;
        toAddress: HexString;
        tokenAmount: bigint;
        messageFee: bigint;
        arbiterFee: bigint;
        nonce: HexString;
        consistencyLevel: bigint;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    parseAndVerifyGovernanceVAA: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        action: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createAttestTokenHandler: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        createContractAlphAmount: bigint;
        targetChainId: bigint;
        targetTokenBridgeId: HexString;
        isLocal: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createLocalAttestTokenHandler: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    parseAndVerifyRegisterChain: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    registerChain: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    upgradeContract: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    destroyUnexecutedSequenceContracts: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateMinimalConsistencyLevel: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getRefundAddress: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    updateRefundAddress: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getMessageFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    attestToken: {
      params: SignExecuteContractMethodParams<{
        payer: Address;
        localTokenId: HexString;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        nonce: HexString;
        consistencyLevel: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    nextSendSequence: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createLocalTokenPool: {
      params: SignExecuteContractMethodParams<{
        localTokenId: HexString;
        decimals: bigint;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createRemoteTokenPool: {
      params: SignExecuteContractMethodParams<{
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateRemoteTokenPool: {
      params: SignExecuteContractMethodParams<{
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    transferToken: {
      params: SignExecuteContractMethodParams<{
        fromAddress: Address;
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        toChainId: bigint;
        toAddress: HexString;
        tokenAmount: bigint;
        messageFee: bigint;
        arbiterFee: bigint;
        nonce: HexString;
        consistencyLevel: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenBridgeInstance,
  TokenBridgeTypes.Fields
> {
  encodeFields(fields: TokenBridgeTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    TokenBridgeModule: BigInt("102075932637695572646848357"),
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt("0"),
      InvalidEmitAddress: BigInt("1"),
      InvalidMessageSize: BigInt("2"),
      InvalidSequence: BigInt("3"),
      InvalidModule: BigInt("4"),
      InvalidActionId: BigInt("5"),
      InvalidVersion: BigInt("6"),
      InvalidGuardianSetIndex: BigInt("7"),
      InvalidGuardianSetSize: BigInt("8"),
      InvalidSignatureSize: BigInt("9"),
      InvalidSignatureGuardianIndex: BigInt("10"),
      InvalidSignature: BigInt("11"),
      GuardianSetExpired: BigInt("12"),
      InvalidTargetChainId: BigInt("13"),
      ContractStateMismatch: BigInt("14"),
      InvalidRegisterChainMessage: BigInt("15"),
      InvalidTokenId: BigInt("16"),
      InvalidNonceSize: BigInt("17"),
      TokenNotExist: BigInt("18"),
      InvalidTransferTargetChain: BigInt("19"),
      InvalidDestroyUnexecutedSequenceMessage: BigInt("20"),
      InvalidCaller: BigInt("21"),
      ArbiterFeeLessThanAmount: BigInt("22"),
      InvalidAttestTokenMessage: BigInt("23"),
      InvalidPayloadId: BigInt("24"),
      InvalidTransferMessage: BigInt("25"),
      ExpectRemoteToken: BigInt("26"),
      InvalidConsistencyLevel: BigInt("27"),
      InvalidUpdateRefundAddressMessage: BigInt("28"),
      TransferAmountLessThanMessageFee: BigInt("29"),
      InvalidAttestTokenArg: BigInt("30"),
      InvalidAttestTokenHandler: BigInt("31"),
      NotSupported: BigInt("32"),
    },
    ActionId: {
      RegisterChain: "01",
      ContractUpgrade: "02",
      DestroyUnexecutedSequences: "f0",
      UpdateMinimalConsistencyLevel: "f1",
      UpdateRefundAddress: "f2",
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): TokenBridgeInstance {
    return new TokenBridgeInstance(address);
  }

  tests = {
    parseAndVerifyGovernanceVAA: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString; action: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, HexString]>> => {
      return testMethod(
        this,
        "parseAndVerifyGovernanceVAA",
        params,
        getContractByCodeHash
      );
    },
    createAttestTokenHandler: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          payer: Address;
          createContractAlphAmount: bigint;
          targetChainId: bigint;
          targetTokenBridgeId: HexString;
          isLocal: boolean;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createAttestTokenHandler",
        params,
        getContractByCodeHash
      );
    },
    createLocalAttestTokenHandler: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createLocalAttestTokenHandler",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyRegisterChain: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, HexString]>> => {
      return testMethod(
        this,
        "parseAndVerifyRegisterChain",
        params,
        getContractByCodeHash
      );
    },
    registerChain: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString; payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "registerChain", params, getContractByCodeHash);
    },
    upgradeContract: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "upgradeContract", params, getContractByCodeHash);
    },
    destroyUnexecutedSequenceContracts: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "destroyUnexecutedSequenceContracts",
        params,
        getContractByCodeHash
      );
    },
    updateMinimalConsistencyLevel: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateMinimalConsistencyLevel",
        params,
        getContractByCodeHash
      );
    },
    getRefundAddress: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(
        this,
        "getRefundAddress",
        params,
        getContractByCodeHash
      );
    },
    updateRefundAddress: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateRefundAddress",
        params,
        getContractByCodeHash
      );
    },
    getMessageFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getMessageFee", params, getContractByCodeHash);
    },
    attestToken: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          payer: Address;
          localTokenId: HexString;
          decimals: bigint;
          symbol: HexString;
          name: HexString;
          nonce: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "attestToken", params, getContractByCodeHash);
    },
    nextSendSequence: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenBridgeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "nextSendSequence",
        params,
        getContractByCodeHash
      );
    },
    createLocalTokenPool: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          localTokenId: HexString;
          decimals: bigint;
          payer: Address;
          createContractAlphAmount: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createLocalTokenPool",
        params,
        getContractByCodeHash
      );
    },
    createRemoteTokenPool: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          decimals: bigint;
          symbol: HexString;
          name: HexString;
          msgSequence: bigint;
          payer: Address;
          createContractAlphAmount: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    updateRemoteTokenPool: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          symbol: HexString;
          name: HexString;
          msgSequence: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    transferToken: async (
      params: TestContractParamsWithoutMaps<
        TokenBridgeTypes.Fields,
        {
          fromAddress: Address;
          bridgeTokenId: HexString;
          tokenChainId: bigint;
          toChainId: bigint;
          toAddress: HexString;
          tokenAmount: bigint;
          messageFee: bigint;
          arbiterFee: bigint;
          nonce: HexString;
          consistencyLevel: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "transferToken", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenBridgeTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TokenBridge = new Factory(
  Contract.fromJson(
    TokenBridgeContractJson,
    "",
    "3921ab78ca073b5125b2ff7e4232e72f2c1c62554bbc8f81d39e769e6bcf349c",
    []
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeTypes.State> {
    return fetchContractState(TokenBridge, this);
  }

  view = {
    parseAndVerifyGovernanceVAA: async (
      params: TokenBridgeTypes.CallMethodParams<"parseAndVerifyGovernanceVAA">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"parseAndVerifyGovernanceVAA">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "parseAndVerifyGovernanceVAA",
        params,
        getContractByCodeHash
      );
    },
    createAttestTokenHandler: async (
      params: TokenBridgeTypes.CallMethodParams<"createAttestTokenHandler">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"createAttestTokenHandler">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "createAttestTokenHandler",
        params,
        getContractByCodeHash
      );
    },
    createLocalAttestTokenHandler: async (
      params: TokenBridgeTypes.CallMethodParams<"createLocalAttestTokenHandler">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"createLocalAttestTokenHandler">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "createLocalAttestTokenHandler",
        params,
        getContractByCodeHash
      );
    },
    parseAndVerifyRegisterChain: async (
      params: TokenBridgeTypes.CallMethodParams<"parseAndVerifyRegisterChain">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"parseAndVerifyRegisterChain">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "parseAndVerifyRegisterChain",
        params,
        getContractByCodeHash
      );
    },
    registerChain: async (
      params: TokenBridgeTypes.CallMethodParams<"registerChain">
    ): Promise<TokenBridgeTypes.CallMethodResult<"registerChain">> => {
      return callMethod(
        TokenBridge,
        this,
        "registerChain",
        params,
        getContractByCodeHash
      );
    },
    upgradeContract: async (
      params: TokenBridgeTypes.CallMethodParams<"upgradeContract">
    ): Promise<TokenBridgeTypes.CallMethodResult<"upgradeContract">> => {
      return callMethod(
        TokenBridge,
        this,
        "upgradeContract",
        params,
        getContractByCodeHash
      );
    },
    destroyUnexecutedSequenceContracts: async (
      params: TokenBridgeTypes.CallMethodParams<"destroyUnexecutedSequenceContracts">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"destroyUnexecutedSequenceContracts">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "destroyUnexecutedSequenceContracts",
        params,
        getContractByCodeHash
      );
    },
    updateMinimalConsistencyLevel: async (
      params: TokenBridgeTypes.CallMethodParams<"updateMinimalConsistencyLevel">
    ): Promise<
      TokenBridgeTypes.CallMethodResult<"updateMinimalConsistencyLevel">
    > => {
      return callMethod(
        TokenBridge,
        this,
        "updateMinimalConsistencyLevel",
        params,
        getContractByCodeHash
      );
    },
    getRefundAddress: async (
      params?: TokenBridgeTypes.CallMethodParams<"getRefundAddress">
    ): Promise<TokenBridgeTypes.CallMethodResult<"getRefundAddress">> => {
      return callMethod(
        TokenBridge,
        this,
        "getRefundAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updateRefundAddress: async (
      params: TokenBridgeTypes.CallMethodParams<"updateRefundAddress">
    ): Promise<TokenBridgeTypes.CallMethodResult<"updateRefundAddress">> => {
      return callMethod(
        TokenBridge,
        this,
        "updateRefundAddress",
        params,
        getContractByCodeHash
      );
    },
    getMessageFee: async (
      params?: TokenBridgeTypes.CallMethodParams<"getMessageFee">
    ): Promise<TokenBridgeTypes.CallMethodResult<"getMessageFee">> => {
      return callMethod(
        TokenBridge,
        this,
        "getMessageFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    attestToken: async (
      params: TokenBridgeTypes.CallMethodParams<"attestToken">
    ): Promise<TokenBridgeTypes.CallMethodResult<"attestToken">> => {
      return callMethod(
        TokenBridge,
        this,
        "attestToken",
        params,
        getContractByCodeHash
      );
    },
    nextSendSequence: async (
      params?: TokenBridgeTypes.CallMethodParams<"nextSendSequence">
    ): Promise<TokenBridgeTypes.CallMethodResult<"nextSendSequence">> => {
      return callMethod(
        TokenBridge,
        this,
        "nextSendSequence",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createLocalTokenPool: async (
      params: TokenBridgeTypes.CallMethodParams<"createLocalTokenPool">
    ): Promise<TokenBridgeTypes.CallMethodResult<"createLocalTokenPool">> => {
      return callMethod(
        TokenBridge,
        this,
        "createLocalTokenPool",
        params,
        getContractByCodeHash
      );
    },
    createRemoteTokenPool: async (
      params: TokenBridgeTypes.CallMethodParams<"createRemoteTokenPool">
    ): Promise<TokenBridgeTypes.CallMethodResult<"createRemoteTokenPool">> => {
      return callMethod(
        TokenBridge,
        this,
        "createRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    updateRemoteTokenPool: async (
      params: TokenBridgeTypes.CallMethodParams<"updateRemoteTokenPool">
    ): Promise<TokenBridgeTypes.CallMethodResult<"updateRemoteTokenPool">> => {
      return callMethod(
        TokenBridge,
        this,
        "updateRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    transferToken: async (
      params: TokenBridgeTypes.CallMethodParams<"transferToken">
    ): Promise<TokenBridgeTypes.CallMethodResult<"transferToken">> => {
      return callMethod(
        TokenBridge,
        this,
        "transferToken",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    parseAndVerifyGovernanceVAA: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"parseAndVerifyGovernanceVAA">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"parseAndVerifyGovernanceVAA">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "parseAndVerifyGovernanceVAA",
        params
      );
    },
    createAttestTokenHandler: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"createAttestTokenHandler">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"createAttestTokenHandler">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "createAttestTokenHandler",
        params
      );
    },
    createLocalAttestTokenHandler: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"createLocalAttestTokenHandler">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"createLocalAttestTokenHandler">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "createLocalAttestTokenHandler",
        params
      );
    },
    parseAndVerifyRegisterChain: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"parseAndVerifyRegisterChain">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"parseAndVerifyRegisterChain">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "parseAndVerifyRegisterChain",
        params
      );
    },
    registerChain: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"registerChain">
    ): Promise<TokenBridgeTypes.SignExecuteMethodResult<"registerChain">> => {
      return signExecuteMethod(TokenBridge, this, "registerChain", params);
    },
    upgradeContract: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"upgradeContract">
    ): Promise<TokenBridgeTypes.SignExecuteMethodResult<"upgradeContract">> => {
      return signExecuteMethod(TokenBridge, this, "upgradeContract", params);
    },
    destroyUnexecutedSequenceContracts: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"destroyUnexecutedSequenceContracts">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"destroyUnexecutedSequenceContracts">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "destroyUnexecutedSequenceContracts",
        params
      );
    },
    updateMinimalConsistencyLevel: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"updateMinimalConsistencyLevel">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"updateMinimalConsistencyLevel">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "updateMinimalConsistencyLevel",
        params
      );
    },
    getRefundAddress: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"getRefundAddress">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"getRefundAddress">
    > => {
      return signExecuteMethod(TokenBridge, this, "getRefundAddress", params);
    },
    updateRefundAddress: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"updateRefundAddress">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"updateRefundAddress">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "updateRefundAddress",
        params
      );
    },
    getMessageFee: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"getMessageFee">
    ): Promise<TokenBridgeTypes.SignExecuteMethodResult<"getMessageFee">> => {
      return signExecuteMethod(TokenBridge, this, "getMessageFee", params);
    },
    attestToken: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"attestToken">
    ): Promise<TokenBridgeTypes.SignExecuteMethodResult<"attestToken">> => {
      return signExecuteMethod(TokenBridge, this, "attestToken", params);
    },
    nextSendSequence: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"nextSendSequence">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"nextSendSequence">
    > => {
      return signExecuteMethod(TokenBridge, this, "nextSendSequence", params);
    },
    createLocalTokenPool: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"createLocalTokenPool">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"createLocalTokenPool">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "createLocalTokenPool",
        params
      );
    },
    createRemoteTokenPool: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"createRemoteTokenPool">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"createRemoteTokenPool">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "createRemoteTokenPool",
        params
      );
    },
    updateRemoteTokenPool: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"updateRemoteTokenPool">
    ): Promise<
      TokenBridgeTypes.SignExecuteMethodResult<"updateRemoteTokenPool">
    > => {
      return signExecuteMethod(
        TokenBridge,
        this,
        "updateRemoteTokenPool",
        params
      );
    },
    transferToken: async (
      params: TokenBridgeTypes.SignExecuteMethodParams<"transferToken">
    ): Promise<TokenBridgeTypes.SignExecuteMethodResult<"transferToken">> => {
      return signExecuteMethod(TokenBridge, this, "transferToken", params);
    },
  };

  async multicall<Calls extends TokenBridgeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenBridgeTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TokenBridgeTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TokenBridgeTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TokenBridgeTypes.MultiCallParams
      | TokenBridgeTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TokenBridge,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
