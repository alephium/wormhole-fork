/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenBridgeContractJson } from "../token_bridge/token_bridge.ral.json";

// Custom types for the contract
export namespace TokenBridgeTypes {
  export type Fields = {
    governance: HexString;
    localChainId: bigint;
    receivedSequence: bigint;
    sendSequence: bigint;
    tokenBridgeFactory: HexString;
    minimalConsistencyLevel: bigint;
    refundAddress: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getRefundAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getMessageFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  TokenBridgeInstance,
  TokenBridgeTypes.Fields
> {
  at(address: string): TokenBridgeInstance {
    return new TokenBridgeInstance(address);
  }

  async testParseAndVerifyGovernanceVAAMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      { vaa: HexString; action: HexString }
    >
  ): Promise<TestContractResult<[bigint, HexString]>> {
    return testMethod(this, "parseAndVerifyGovernanceVAA", params);
  }

  async testCreateAttestTokenHandlerMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        payer: HexString;
        createContractAlphAmount: bigint;
        remoteChainId: bigint;
        remoteTokenBridgeId: HexString;
        isLocal: boolean;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createAttestTokenHandler", params);
  }

  async testCreateLocalAttestTokenHandlerMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      { payer: HexString; createContractAlphAmount: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createLocalAttestTokenHandler", params);
  }

  async testParseAndVerifyRegisterChainMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
  ): Promise<TestContractResult<[bigint, HexString]>> {
    return testMethod(this, "parseAndVerifyRegisterChain", params);
  }

  async testRegisterChainMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      { vaa: HexString; payer: HexString; createContractAlphAmount: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "registerChain", params);
  }

  async testUpgradeContractMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "upgradeContract", params);
  }

  async testDestroyUnexecutedSequenceContractsMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "destroyUnexecutedSequenceContracts", params);
  }

  async testUpdateMinimalConsistencyLevelMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateMinimalConsistencyLevel", params);
  }

  async testGetRefundAddressMethod(
    params: Omit<TestContractParams<TokenBridgeTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getRefundAddress", params);
  }

  async testUpdateRefundAddressMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { vaa: HexString }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateRefundAddress", params);
  }

  async testParseConractUpgradeMethod(
    params: TestContractParams<TokenBridgeTypes.Fields, { payload: HexString }>
  ): Promise<TestContractResult<[HexString, HexString, HexString, HexString]>> {
    return testMethod(this, "parseConractUpgrade", params);
  }

  async testGetMessageFeeMethod(
    params: Omit<TestContractParams<TokenBridgeTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getMessageFee", params);
  }

  async testAttestTokenMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        payer: HexString;
        localTokenId: HexString;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        nonce: HexString;
        consistencyLevel: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "attestToken", params);
  }

  async testNextSendSequenceMethod(
    params: Omit<TestContractParams<TokenBridgeTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "nextSendSequence", params);
  }

  async testCreateLocalTokenPoolMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        localTokenId: HexString;
        decimals: bigint;
        payer: HexString;
        createContractAlphAmount: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createLocalTokenPool", params);
  }

  async testCreateRemoteTokenPoolMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        decimals: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
        payer: HexString;
        createContractAlphAmount: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "createRemoteTokenPool", params);
  }

  async testUpdateRemoteTokenPoolMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        symbol: HexString;
        name: HexString;
        msgSequence: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateRemoteTokenPool", params);
  }

  async testTransferTokenMethod(
    params: TestContractParams<
      TokenBridgeTypes.Fields,
      {
        fromAddress: HexString;
        bridgeTokenId: HexString;
        tokenChainId: bigint;
        toChainId: bigint;
        toAddress: HexString;
        tokenAmount: bigint;
        messageFee: bigint;
        arbiterFee: bigint;
        nonce: HexString;
        consistencyLevel: bigint;
      }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "transferToken", params);
  }
}

// Use this object to test and deploy the contract
export const TokenBridge = new Factory(
  Contract.fromJson(
    TokenBridgeContractJson,
    "",
    "e883edaac26437b449407bfec831e89c98b8139e59235f3f49246f2ef593ec08"
  )
);

// Use this class to interact with the blockchain
export class TokenBridgeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenBridgeTypes.State> {
    return fetchContractState(TokenBridge, this);
  }

  async callGetRefundAddressMethod(
    params?: TokenBridgeTypes.CallMethodParams<"getRefundAddress">
  ): Promise<TokenBridgeTypes.CallMethodResult<"getRefundAddress">> {
    return callMethod(
      TokenBridge,
      this,
      "getRefundAddress",
      params === undefined ? {} : params
    );
  }

  async callGetMessageFeeMethod(
    params?: TokenBridgeTypes.CallMethodParams<"getMessageFee">
  ): Promise<TokenBridgeTypes.CallMethodResult<"getMessageFee">> {
    return callMethod(
      TokenBridge,
      this,
      "getMessageFee",
      params === undefined ? {} : params
    );
  }

  async multicall<Calls extends TokenBridgeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TokenBridgeTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      TokenBridge,
      this,
      calls
    )) as TokenBridgeTypes.MultiCallResults<Calls>;
  }
}
