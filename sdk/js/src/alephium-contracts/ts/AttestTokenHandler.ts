/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AttestTokenHandlerContractJson } from "../token_bridge/attest_token_handler.ral.json";

// Custom types for the contract
export namespace AttestTokenHandlerTypes {
  export type Fields = {
    governance: HexString;
    localTokenBridge: HexString;
    targetChainId: bigint;
    targetTokenBridge: HexString;
    receivedSequence: bigint;
    isLocalHandler: boolean;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  AttestTokenHandlerInstance,
  AttestTokenHandlerTypes.Fields
> {
  at(address: string): AttestTokenHandlerInstance {
    return new AttestTokenHandlerInstance(address);
  }

  tests = {
    parseAttestToken: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<
      TestContractResult<[HexString, HexString, HexString, bigint, bigint]>
    > => {
      return testMethod(this, "parseAttestToken", params);
    },
    createLocalTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        {
          vaa: HexString;
          payer: Address;
          createContractAlphAmount: bigint;
          tokenAmount: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createLocalTokenPool", params);
    },
    createRemoteTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString; payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createRemoteTokenPool", params);
    },
    updateRemoteTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateRemoteTokenPool", params);
    },
    removeTrailingZeros: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { bytes: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "removeTrailingZeros", params);
    },
  };
}

// Use this object to test and deploy the contract
export const AttestTokenHandler = new Factory(
  Contract.fromJson(
    AttestTokenHandlerContractJson,
    "",
    "a8d5b3de6a6267d4a12eb793dc90832b0b0e5b84f54c5458d0fedfe73dc0871c"
  )
);

// Use this class to interact with the blockchain
export class AttestTokenHandlerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AttestTokenHandlerTypes.State> {
    return fetchContractState(AttestTokenHandler, this);
  }
}
