/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AttestTokenHandlerContractJson } from "../token_bridge/AttestTokenHandler.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AttestTokenHandlerTypes {
  export type Fields = {
    governance: HexString;
    localTokenBridge: HexString;
    targetChainId: bigint;
    targetTokenBridgeId: HexString;
    receivedSequence: bigint;
    isLocalHandler: boolean;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  AttestTokenHandlerInstance,
  AttestTokenHandlerTypes.Fields
> {
  consts = {
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt(0),
      InvalidEmitAddress: BigInt(1),
      InvalidMessageSize: BigInt(2),
      InvalidSequence: BigInt(3),
      InvalidModule: BigInt(4),
      InvalidActionId: BigInt(5),
      InvalidVersion: BigInt(6),
      InvalidGuardianSetIndex: BigInt(7),
      InvalidGuardianSetSize: BigInt(8),
      InvalidSignatureSize: BigInt(9),
      InvalidSignatureGuardianIndex: BigInt(10),
      InvalidSignature: BigInt(11),
      GuardianSetExpired: BigInt(12),
      InvalidTargetChainId: BigInt(13),
      ContractStateMismatch: BigInt(14),
      InvalidRegisterChainMessage: BigInt(15),
      InvalidTokenId: BigInt(16),
      InvalidNonceSize: BigInt(17),
      TokenNotExist: BigInt(18),
      InvalidTransferTargetChain: BigInt(19),
      InvalidDestroyUnexecutedSequenceMessage: BigInt(20),
      InvalidCaller: BigInt(21),
      ArbiterFeeLessThanAmount: BigInt(22),
      InvalidAttestTokenMessage: BigInt(23),
      InvalidPayloadId: BigInt(24),
      InvalidTransferMessage: BigInt(25),
      ExpectRemoteToken: BigInt(26),
      InvalidConsistencyLevel: BigInt(27),
      InvalidUpdateRefundAddressMessage: BigInt(28),
      TransferAmountLessThanMessageFee: BigInt(29),
      InvalidAttestTokenArg: BigInt(30),
      InvalidAttestTokenHandler: BigInt(31),
      NotSupported: BigInt(32),
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): AttestTokenHandlerInstance {
    return new AttestTokenHandlerInstance(address);
  }

  tests = {
    parseAttestToken: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<
      TestContractResult<[HexString, HexString, HexString, bigint, bigint]>
    > => {
      return testMethod(this, "parseAttestToken", params);
    },
    createLocalTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        {
          vaa: HexString;
          payer: Address;
          createContractAlphAmount: bigint;
          tokenAmount: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createLocalTokenPool", params);
    },
    createRemoteTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString; payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createRemoteTokenPool", params);
    },
    updateRemoteTokenPool: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateRemoteTokenPool", params);
    },
    removeTrailingZeros: async (
      params: TestContractParams<
        AttestTokenHandlerTypes.Fields,
        { bytes: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "removeTrailingZeros", params);
    },
  };
}

// Use this object to test and deploy the contract
export const AttestTokenHandler = new Factory(
  Contract.fromJson(
    AttestTokenHandlerContractJson,
    "",
    "a8d5b3de6a6267d4a12eb793dc90832b0b0e5b84f54c5458d0fedfe73dc0871c"
  )
);

// Use this class to interact with the blockchain
export class AttestTokenHandlerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AttestTokenHandlerTypes.State> {
    return fetchContractState(AttestTokenHandler, this);
  }
}
