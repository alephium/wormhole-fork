/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as AttestTokenHandlerContractJson } from "../token_bridge/AttestTokenHandler.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace AttestTokenHandlerTypes {
  export type Fields = {
    governance: HexString;
    localTokenBridge: HexString;
    targetChainId: bigint;
    targetTokenBridgeId: HexString;
    receivedSequence: bigint;
    isLocalHandler: boolean;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    parseAttestToken: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<
        [HexString, HexString, HexString, bigint, bigint]
      >;
    };
    createLocalTokenPool: {
      params: CallContractParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
        tokenAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    createRemoteTokenPool: {
      params: CallContractParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    updateRemoteTokenPool: {
      params: CallContractParams<{ vaa: HexString }>;
      result: CallContractResult<null>;
    };
    removeTrailingZeros: {
      params: CallContractParams<{ bytes: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    parseAttestToken: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    createLocalTokenPool: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
        tokenAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createRemoteTokenPool: {
      params: SignExecuteContractMethodParams<{
        vaa: HexString;
        payer: Address;
        createContractAlphAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateRemoteTokenPool: {
      params: SignExecuteContractMethodParams<{ vaa: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    removeTrailingZeros: {
      params: SignExecuteContractMethodParams<{ bytes: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  AttestTokenHandlerInstance,
  AttestTokenHandlerTypes.Fields
> {
  encodeFields(fields: AttestTokenHandlerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    Path: {
      AttestTokenHandler: "00",
      TokenBridgeForChain: "01",
      TokenPool: "02",
    },
    ErrorCodes: {
      InvalidEmitChainId: BigInt("0"),
      InvalidEmitAddress: BigInt("1"),
      InvalidMessageSize: BigInt("2"),
      InvalidSequence: BigInt("3"),
      InvalidModule: BigInt("4"),
      InvalidActionId: BigInt("5"),
      InvalidVersion: BigInt("6"),
      InvalidGuardianSetIndex: BigInt("7"),
      InvalidGuardianSetSize: BigInt("8"),
      InvalidSignatureSize: BigInt("9"),
      InvalidSignatureGuardianIndex: BigInt("10"),
      InvalidSignature: BigInt("11"),
      GuardianSetExpired: BigInt("12"),
      InvalidTargetChainId: BigInt("13"),
      ContractStateMismatch: BigInt("14"),
      InvalidRegisterChainMessage: BigInt("15"),
      InvalidTokenId: BigInt("16"),
      InvalidNonceSize: BigInt("17"),
      TokenNotExist: BigInt("18"),
      InvalidTransferTargetChain: BigInt("19"),
      InvalidDestroyUnexecutedSequenceMessage: BigInt("20"),
      InvalidCaller: BigInt("21"),
      ArbiterFeeLessThanAmount: BigInt("22"),
      InvalidAttestTokenMessage: BigInt("23"),
      InvalidPayloadId: BigInt("24"),
      InvalidTransferMessage: BigInt("25"),
      ExpectRemoteToken: BigInt("26"),
      InvalidConsistencyLevel: BigInt("27"),
      InvalidUpdateRefundAddressMessage: BigInt("28"),
      TransferAmountLessThanMessageFee: BigInt("29"),
      InvalidAttestTokenArg: BigInt("30"),
      InvalidAttestTokenHandler: BigInt("31"),
      NotSupported: BigInt("32"),
    },
    PayloadId: { Transfer: "01", AttestToken: "02" },
  };

  at(address: string): AttestTokenHandlerInstance {
    return new AttestTokenHandlerInstance(address);
  }

  tests = {
    parseAttestToken: async (
      params: TestContractParamsWithoutMaps<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<
      TestContractResultWithoutMaps<
        [HexString, HexString, HexString, bigint, bigint]
      >
    > => {
      return testMethod(
        this,
        "parseAttestToken",
        params,
        getContractByCodeHash
      );
    },
    createLocalTokenPool: async (
      params: TestContractParamsWithoutMaps<
        AttestTokenHandlerTypes.Fields,
        {
          vaa: HexString;
          payer: Address;
          createContractAlphAmount: bigint;
          tokenAmount: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createLocalTokenPool",
        params,
        getContractByCodeHash
      );
    },
    createRemoteTokenPool: async (
      params: TestContractParamsWithoutMaps<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString; payer: Address; createContractAlphAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "createRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    updateRemoteTokenPool: async (
      params: TestContractParamsWithoutMaps<
        AttestTokenHandlerTypes.Fields,
        { vaa: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    removeTrailingZeros: async (
      params: TestContractParamsWithoutMaps<
        AttestTokenHandlerTypes.Fields,
        { bytes: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "removeTrailingZeros",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: AttestTokenHandlerTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const AttestTokenHandler = new Factory(
  Contract.fromJson(
    AttestTokenHandlerContractJson,
    "",
    "a8d5b3de6a6267d4a12eb793dc90832b0b0e5b84f54c5458d0fedfe73dc0871c",
    []
  )
);
registerContract(AttestTokenHandler);

// Use this class to interact with the blockchain
export class AttestTokenHandlerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AttestTokenHandlerTypes.State> {
    return fetchContractState(AttestTokenHandler, this);
  }

  view = {
    parseAttestToken: async (
      params: AttestTokenHandlerTypes.CallMethodParams<"parseAttestToken">
    ): Promise<
      AttestTokenHandlerTypes.CallMethodResult<"parseAttestToken">
    > => {
      return callMethod(
        AttestTokenHandler,
        this,
        "parseAttestToken",
        params,
        getContractByCodeHash
      );
    },
    createLocalTokenPool: async (
      params: AttestTokenHandlerTypes.CallMethodParams<"createLocalTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.CallMethodResult<"createLocalTokenPool">
    > => {
      return callMethod(
        AttestTokenHandler,
        this,
        "createLocalTokenPool",
        params,
        getContractByCodeHash
      );
    },
    createRemoteTokenPool: async (
      params: AttestTokenHandlerTypes.CallMethodParams<"createRemoteTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.CallMethodResult<"createRemoteTokenPool">
    > => {
      return callMethod(
        AttestTokenHandler,
        this,
        "createRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    updateRemoteTokenPool: async (
      params: AttestTokenHandlerTypes.CallMethodParams<"updateRemoteTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.CallMethodResult<"updateRemoteTokenPool">
    > => {
      return callMethod(
        AttestTokenHandler,
        this,
        "updateRemoteTokenPool",
        params,
        getContractByCodeHash
      );
    },
    removeTrailingZeros: async (
      params: AttestTokenHandlerTypes.CallMethodParams<"removeTrailingZeros">
    ): Promise<
      AttestTokenHandlerTypes.CallMethodResult<"removeTrailingZeros">
    > => {
      return callMethod(
        AttestTokenHandler,
        this,
        "removeTrailingZeros",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    parseAttestToken: async (
      params: AttestTokenHandlerTypes.SignExecuteMethodParams<"parseAttestToken">
    ): Promise<
      AttestTokenHandlerTypes.SignExecuteMethodResult<"parseAttestToken">
    > => {
      return signExecuteMethod(
        AttestTokenHandler,
        this,
        "parseAttestToken",
        params
      );
    },
    createLocalTokenPool: async (
      params: AttestTokenHandlerTypes.SignExecuteMethodParams<"createLocalTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.SignExecuteMethodResult<"createLocalTokenPool">
    > => {
      return signExecuteMethod(
        AttestTokenHandler,
        this,
        "createLocalTokenPool",
        params
      );
    },
    createRemoteTokenPool: async (
      params: AttestTokenHandlerTypes.SignExecuteMethodParams<"createRemoteTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.SignExecuteMethodResult<"createRemoteTokenPool">
    > => {
      return signExecuteMethod(
        AttestTokenHandler,
        this,
        "createRemoteTokenPool",
        params
      );
    },
    updateRemoteTokenPool: async (
      params: AttestTokenHandlerTypes.SignExecuteMethodParams<"updateRemoteTokenPool">
    ): Promise<
      AttestTokenHandlerTypes.SignExecuteMethodResult<"updateRemoteTokenPool">
    > => {
      return signExecuteMethod(
        AttestTokenHandler,
        this,
        "updateRemoteTokenPool",
        params
      );
    },
    removeTrailingZeros: async (
      params: AttestTokenHandlerTypes.SignExecuteMethodParams<"removeTrailingZeros">
    ): Promise<
      AttestTokenHandlerTypes.SignExecuteMethodResult<"removeTrailingZeros">
    > => {
      return signExecuteMethod(
        AttestTokenHandler,
        this,
        "removeTrailingZeros",
        params
      );
    },
  };

  async multicall<Calls extends AttestTokenHandlerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AttestTokenHandlerTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends AttestTokenHandlerTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<AttestTokenHandlerTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | AttestTokenHandlerTypes.MultiCallParams
      | AttestTokenHandlerTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      AttestTokenHandler,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
